/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BlackScholes,
  BlackScholesInterface,
} from "../../../../../@lyrafinance/protocol/contracts/libraries/BlackScholes";

const _abi = [
  {
    inputs: [],
    name: "ExpOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "LnNegativeUndefined",
    type: "error",
  },
  {
    inputs: [],
    name: "Overflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "_stdNormalCDF",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timeToExpirySec",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volatilityDecimal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotDecimal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePriceDecimal",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "rateDecimal",
            type: "int256",
          },
        ],
        internalType: "struct BlackScholes.BlackScholesInputs",
        name: "bsInput",
        type: "tuple",
      },
    ],
    name: "delta",
    outputs: [
      {
        internalType: "int256",
        name: "callDeltaDecimal",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "putDeltaDecimal",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timeToExpirySec",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volatilityDecimal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotDecimal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePriceDecimal",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "rateDecimal",
            type: "int256",
          },
        ],
        internalType: "struct BlackScholes.BlackScholesInputs",
        name: "bsInput",
        type: "tuple",
      },
    ],
    name: "optionPrices",
    outputs: [
      {
        internalType: "uint256",
        name: "call",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "put",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timeToExpirySec",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volatilityDecimal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotDecimal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePriceDecimal",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "rateDecimal",
            type: "int256",
          },
        ],
        internalType: "struct BlackScholes.BlackScholesInputs",
        name: "bsInput",
        type: "tuple",
      },
    ],
    name: "pricesDeltaStdVega",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "callPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "putPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "callDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "putDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "vega",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stdVega",
            type: "uint256",
          },
        ],
        internalType: "struct BlackScholes.PricesDeltaStdVega",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timeToExpirySec",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volatilityDecimal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotDecimal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePriceDecimal",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "rateDecimal",
            type: "int256",
          },
        ],
        internalType: "struct BlackScholes.BlackScholesInputs",
        name: "bsInput",
        type: "tuple",
      },
    ],
    name: "vega",
    outputs: [
      {
        internalType: "uint256",
        name: "vegaDecimal",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61197b61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c8063246e1ff51161005a578063246e1ff5146100ff5780638d31f3aa14610112578063b6e62e591461013a57600080fd5b8063036d587814610076578063192e7b98146100de575b600080fd5b6100896100843660046113fb565b61014d565b6040516100d59190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b60405180910390f35b6100f16100ec3660046113fb565b61029f565b6040519081526020016100d5565b6100f161010d366004611492565b61030f565b6101256101203660046113fb565b6104b7565b604080519283526020830191909152016100d5565b6101256101483660046113fb565b610530565b6101866040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061019583600001516105cb565b905060006101a684604001516105e1565b90506000806101dc846101bc88602001516105e1565b856101ca8a606001516105e1565b6101d78b60800151610607565b61062d565b9150915060008061020986866101f58b606001516105e1565b6102028c60800151610607565b888861073b565b9150915060008061021f86888c600001516107cf565b9150915060008061022f88610815565b915091506040518060c0016040528061024788610840565b815260200161025587610840565b8152602001610263846108a7565b8152602001610271836108a7565b815260200161027f86610840565b815260200161028d85610840565b90529c9b505050505050505050505050565b6000806102af83600001516105cb565b905060006102c084604001516105e1565b905060006102f0836102d587602001516105e1565b846102e389606001516105e1565b6101d78a60800151610607565b5090506103066103018484846108e5565b610840565b95945050505050565b60008061031b83610900565b905060006103366b033b2e3c9fd0803ce800000060256114da565b821161048957600061036461035661034f600286611546565b8590610918565b61035f9061155a565b610930565b90506b16d90cda2bbc61dfb66de0008310156103a65761039f8161039961038a86610956565b61039387610abc565b90610ba3565b90610918565b9150610487565b600061045761043a6104196103f860146103cd6b033b2e3c9fd0803ce8000000600d6114da565b6103d79190611546565b6103e19089611593565b6103936b033b2e3c9fd0803ce800000060046114da565b6104029088611593565b6103936b033b2e3c9fd0803ce800000060036114da565b6104239087611593565b6103936b033b2e3c9fd0803ce800000060026114da565b6104449086611593565b6b033b2e3c9fd0803ce800000090610ba3565b6104619085611593565b905061048361047c826b08196f2f0c65a776731daf25610918565b8390610ba3565b9250505b505b60008413156104ad576104a8816b033b2e3c9fd0803ce80000006115ab565b6104af565b805b949350505050565b60008060006104c984600001516105cb565b905060006104da85604001516105e1565b905060006104fd836104ef88602001516105e1565b846101ca8a606001516105e1565b50905060008061050c83610815565b91509150610519826108a7565b610522826108a7565b965096505050505050915091565b600080600061054284600001516105cb565b9050600061055385604001516105e1565b9050600061056486606001516105e1565b905060006105758760800151610607565b90506000806105938661058b8b602001516105e1565b87878761062d565b915091506105a586868686868661073b565b90985096506105b388610840565b6105bc88610840565b97509750505050505050915091565b60006105db826301e13380610ba3565b92915050565b60006105ef6012601b61161f565b6105fd9060ff16600a611762565b6105db90836114da565b60006106156012601b61161f565b6106239060ff16600a611762565b6105db908361176e565b60008061064a6301e133806b033b2e3c9fd0803ce8000000611546565b87106106565786610670565b6106706301e133806b033b2e3c9fd0803ce8000000611546565b965061068a6127106b033b2e3c9fd0803ce8000000611546565b861061069657856106ae565b6106ae6127106b033b2e3c9fd0803ce8000000611546565b955060006106c56106be89610bbb565b8890610918565b905060006106db6106d68888610ba3565b610bdb565b9050600061070a8a8760026106f08d80610918565b6106fa9190611546565b610704919061182a565b90610c01565b90506107208361071a838561182a565b90610c19565b945061072c83866115ab565b93505050509550959350505050565b6000808061074f6106be610356888c610c01565b9050600061076661075f8761030f565b8a90610918565b9050600061077d6107768761030f565b8490610918565b90508181111561078e576000610798565b610798818361189e565b94506107a48386611593565b9350838a11156107b55760006107bf565b6107bf8a8561189e565b9350505050965096945050505050565b60008060006107dd846105cb565b905060006107ea85610c31565b905060006107f983888a6108e5565b9050806108068184610918565b94509450505050935093915050565b6000806108218361030f565b91506108396b033b2e3c9fd0803ce8000000836115ab565b9050915091565b600080600a6108516012601b61161f565b61085f9060ff16600a611762565b6108699190611546565b6108739084611546565b90506005610882600a836118b5565b1061089557610892600a82611593565b90505b6108a0600a82611546565b9392505050565b600080600a6108b86012601b61161f565b6108c69060ff16600a611762565b6108d091906118c9565b6108da90846118c9565b90506108a081610c94565b60006104af6108f78461039985610d1b565b61039986610bbb565b600080821261090f57816105db565b6105db8261155a565b60006108a0838361092b601b600a611762565b610d45565b6000610948610943633b9aca00846118c9565b610d94565b6105db90633b9aca006114da565b6000806c01186756d73741bcf7186740006b033b2e3c9fd0803ce8000000846b33e7f9eb874906c0804d800082826b05ac40fb9fcbd61a1c530000826109a7836a491cf5ed58c13f046580006114da565b6109b19190611546565b6109bb9190611593565b6109c591906114da565b6109cf9190611546565b6109d99190611593565b6109e391906114da565b6109ed9190611546565b6109f79190611593565b90506c058f0db42aaec2a56c7b5800006b033b2e3c9fd0803ce8000000846c0a04fde6a089345e53ecce000082826c080b5606775ed46a4938a1800082826c03be40326c6c3695becee9000082610a4e838d6114da565b610a589190611546565b610a629190611593565b610a6c91906114da565b610a769190611546565b610a809190611593565b610a8a91906114da565b610a949190611546565b610a9e9190611593565b610aa891906114da565b610ab29190611546565b6108a09190611593565b6000806b6d9410b9dea0c8f816b180006b033b2e3c9fd0803ce8000000846b14986aff6ba446890962200082826b024357e200894d98c57a800082610b0c836a1d2b1fc56316da1beb18006114da565b610b169190611546565b610b209190611593565b610b2a91906114da565b610b349190611546565b610b3e9190611593565b610b4891906114da565b610b529190611546565b610b5c9190611593565b90506c02c786da15576152b63dac00006b033b2e3c9fd0803ce8000000846c02cac7991589dbf7204867800082826c016a25d126a1a2fc90d761800082610a6c838a6114da565b60006108a08383610bb6601b600a611762565b610f6c565b60006105db610bd66b033b2e3c9fd0803ce8000000846114da565b610f85565b6000610bf3610bee633b9aca00846118c9565b611103565b6105db90633b9aca0061176e565b60006108a08383610c14601b600a611762565b6113b5565b60006108a08383610c2c601b600a611762565b6113e2565b600062093a808210610c435781610c48565b62093a805b91506000610c596201518084611546565b90506000610c746b033b2e3c9fd0803ce8000000601e6114da565b90506064610c8a610c858484611546565b610bbb565b6104af9190611546565b6000806005610ca4600a85611931565b12610cb15750600a610d05565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb610cdd600a85611931565b13610d0557507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65b600a610d11828561182a565b6108a091906118c9565b60006105db6b08196f2f0c65a776731daf25610393610356610d3e6002876118c9565b8690610c01565b600080610d53600a84611546565b610d5d85876114da565b610d679190611546565b90506005610d76600a836118b5565b10610d8957610d86600a82611593565b90505b610306600a82611546565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c18213610dc557506000919050565b680755bf798b4a1bf1e58212610e07576040517fa37bfec900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b6d2c06887d92262d378b9593af35346c09791803c2923d5d9721c3da80929091056b8000000000000000000000000190921d6bb17217f7d1cf79abc9e3b39881029095039081018102606090811d6d019dd9374d4315c8464a395fc09881017fffffffffffffffffffffffffffffffffffffffe400ce74ed9455bc9156515002840102821d93840193016d29c9ad45cc0beb0a2ff097a7bab40192909202821d6dcf3c27b2e487711b467e90f19320016c22fcd1cffa6fa000f6e27eeca082018202831d6d022f98fbc368092c79210d196fa0018202831d6d13aaae3ba38de06adc25ebfacc0901820290921d6d624dcbeb5e25df590e409325888a010279d835ebba824c98fb19256146f65c000000000000000000000000010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b60008083610f7b84600a6114da565b610d5d90876114da565b600081610f9457506000919050565b506001817001000000000000000000000000000000008110610fbb5760409190911b9060801c5b680100000000000000008110610fd65760209190911b9060401c5b6401000000008110610fed5760109190911b9060201c5b6201000081106110025760089190911b9060101c5b61010081106110165760049190911b9060081c5b601081106110295760029190911b9060041c5b6008811061103957600182901b91505b600182848161104a5761104a611517565b048301901c9150600182848161106257611062611517565b048301901c9150600182848161107a5761107a611517565b048301901c9150600182848161109257611092611517565b048301901c915060018284816110aa576110aa611517565b048301901c915060018284816110c2576110c2611517565b048301901c915060018284816110da576110da611517565b048301901c915060008284816110f2576110f2611517565b049050808310156104ad57826104af565b6000600182121561117b576000821215611149576040517f906dbb0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606060016fffffffffffffffffffffffffffffffff851160071b85811c67ffffffffffffffff1060061b1785811c63ffffffff1060051b1785811c61ffff1060041b1785811c60ff10600390811b90911786811c600f1060021b1786811c909110821b1785811c919091111703609f8181039490941b90931c6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d7fffffffffffffffffffffffffffffffffffffff73c0c716a594e00d54e3c4cbc9018302821d7ffffffffffffffffffffffffffffffffffffffdc7b88c420e53a9890533129f6f01830290911d7fffffffffffffffffffffffffffffffffffffff465fda27eb4d63ded474e5f832019091027ffffffffffffffff5f6af8f7b3396644f18e157960000000000000000000000000105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b393909302929092017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000806113c3600a846118c9565b6113cd858761176e565b6113d791906118c9565b905061030681610c94565b600080836113f184600a61176e565b6113cd908761176e565b600060a0828403121561140d57600080fd5b60405160a0810181811067ffffffffffffffff82111715611457577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b6000602082840312156114a457600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611512576115126114ab565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261155557611555611517565b500490565b60007f800000000000000000000000000000000000000000000000000000000000000082141561158c5761158c6114ab565b5060000390565b600082198211156115a6576115a66114ab565b500190565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156115e5576115e56114ab565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615611619576116196114ab565b50500390565b600060ff821660ff841680821015611639576116396114ab565b90039392505050565b600181815b8085111561169b57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611681576116816114ab565b8085161561168e57918102915b93841c9390800290611647565b509250929050565b6000826116b2575060016105db565b816116bf575060006105db565b81600181146116d557600281146116df576116fb565b60019150506105db565b60ff8411156116f0576116f06114ab565b50506001821b6105db565b5060208310610133831016604e8410600b841016171561171e575081810a6105db565b6117288383611642565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561175a5761175a6114ab565b029392505050565b60006108a083836116a3565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156117af576117af6114ab565b7f800000000000000000000000000000000000000000000000000000000000000060008712868205881281841616156117ea576117ea6114ab565b60008712925087820587128484161615611806576118066114ab565b8785058712818416161561181c5761181c6114ab565b505050929093029392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615611864576118646114ab565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615611898576118986114ab565b50500190565b6000828210156118b0576118b06114ab565b500390565b6000826118c4576118c4611517565b500690565b6000826118d8576118d8611517565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561192c5761192c6114ab565b500590565b60008261194057611940611517565b50079056fea2646970667358221220f49f44e801934a5a3ab9e4de4a9224b053276d01992698986d354e1cd09acadc64736f6c63430008090033";

type BlackScholesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlackScholesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlackScholes__factory extends ContractFactory {
  constructor(...args: BlackScholesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlackScholes> {
    return super.deploy(overrides || {}) as Promise<BlackScholes>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BlackScholes {
    return super.attach(address) as BlackScholes;
  }
  override connect(signer: Signer): BlackScholes__factory {
    return super.connect(signer) as BlackScholes__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlackScholesInterface {
    return new utils.Interface(_abi) as BlackScholesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlackScholes {
    return new Contract(address, _abi, signerOrProvider) as BlackScholes;
  }
}
