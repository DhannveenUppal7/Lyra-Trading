/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IExchangeRates,
  IExchangeRatesInterface,
} from "../../../../../@lyrafinance/protocol/contracts/interfaces/IExchangeRates";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "currencyKey",
        type: "bytes32",
      },
    ],
    name: "rateAndInvalid",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isInvalid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IExchangeRates__factory {
  static readonly abi = _abi;
  static createInterface(): IExchangeRatesInterface {
    return new utils.Interface(_abi) as IExchangeRatesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IExchangeRates {
    return new Contract(address, _abi, signerOrProvider) as IExchangeRates;
  }
}
