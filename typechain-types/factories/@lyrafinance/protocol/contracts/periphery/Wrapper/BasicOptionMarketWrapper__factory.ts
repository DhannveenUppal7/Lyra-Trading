/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  BasicOptionMarketWrapper,
  BasicOptionMarketWrapperInterface,
} from "../../../../../../@lyrafinance/protocol/contracts/periphery/Wrapper/BasicOptionMarketWrapper";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nominatedOwner",
        type: "address",
      },
    ],
    name: "OnlyNominatedOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OnlyOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerNominated",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract OptionMarket",
        name: "optionMarket",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "strikeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "iterations",
            type: "uint256",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "setCollateralTo",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minTotalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTotalCost",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.TradeInputParameters",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "extraCollateral",
        type: "uint256",
      },
    ],
    name: "closePosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalFee",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.Result",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract OptionMarket",
        name: "optionMarket",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "strikeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "iterations",
            type: "uint256",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "setCollateralTo",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minTotalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTotalCost",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.TradeInputParameters",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "extraCollateral",
        type: "uint256",
      },
    ],
    name: "forceClosePosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalFee",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.Result",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract OptionMarket",
        name: "",
        type: "address",
      },
    ],
    name: "marketContracts",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "baseAsset",
        type: "address",
      },
      {
        internalType: "contract OptionToken",
        name: "optionToken",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "nominateNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nominatedOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract OptionMarket",
        name: "optionMarket",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "strikeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "iterations",
            type: "uint256",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "setCollateralTo",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minTotalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTotalCost",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.TradeInputParameters",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "extraCollateral",
        type: "uint256",
      },
    ],
    name: "openPosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalFee",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.Result",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract OptionMarket",
        name: "optionMarket",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "quoteAsset",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "baseAsset",
            type: "address",
          },
          {
            internalType: "contract OptionToken",
            name: "optionToken",
            type: "address",
          },
        ],
        internalType: "struct BasicOptionMarketWrapper.OptionMarketContracts",
        name: "_marketContracts",
        type: "tuple",
      },
    ],
    name: "updateMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a16117548061006e6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80636f7c4bfd1161007657806379ba50971161005b57806379ba5097146101e55780638da5cb5b146101ed578063d51046eb1461020d57600080fd5b80636f7c4bfd1461014f57806373ccbf671461016257600080fd5b80631627540c146100a85780633408ef7a146100bd57806339fa8afb146100d057806353a47bb71461010a575b600080fd5b6100bb6100b636600461135a565b610220565b005b6100bb6100cb3660046113cf565b6102a1565b6100e36100de3660046114af565b6104bf565b60408051825181526020808401519082015291810151908201526060015b60405180910390f35b60015461012a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610101565b6100e361015d3660046114af565b6107ef565b6101ae61017036600461135a565b600260208190526000918252604090912080546001820154919092015473ffffffffffffffffffffffffffffffffffffffff92831692918216911683565b6040805173ffffffffffffffffffffffffffffffffffffffff94851681529284166020840152921691810191909152606001610101565b6100bb610964565b60005461012a9073ffffffffffffffffffffffffffffffffffffffff1681565b6100e361021b3660046114af565b610a86565b610228610cbc565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b6102a9610cbc565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260026020818152604092839020865181547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116918816918217835592880151600183018054851691891691909117905587850151919093018054909216951694909417909355517f095ea7b300000000000000000000000000000000000000000000000000000000815260048101919091527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482015263095ea7b390604401602060405180830381600087803b1580156103a357600080fd5b505af11580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db919061157e565b5073ffffffffffffffffffffffffffffffffffffffff828116600081815260026020526040908190206001015490517f095ea7b300000000000000000000000000000000000000000000000000000000815260048101929092527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248301529091169063095ea7b390604401602060405180830381600087803b15801561048257600080fd5b505af1158015610496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ba919061157e565b505050565b6104e360405180606001604052806000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260026020818152604092839020835160608101855281548616815260018201548616818401529201549093169181019190915290840151156105d357604080820151602086015191517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481019290925273ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401600060405180830381600087803b1580156105ba57600080fd5b505af11580156105ce573d6000803e3d6000fd5b505050505b6105e281856060015185610d37565b6040517fe4e83e3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063e4e83e3d906106349087906004016115cf565b606060405180830381600087803b15801561064e57600080fd5b505af1158015610662573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106869190611661565b915061069181610f85565b6001604082810151845191517feb29dc5e000000000000000000000000000000000000000000000000000000008152600481019290925273ffffffffffffffffffffffffffffffffffffffff169063eb29dc5e9060240160206040518083038186803b15801561070057600080fd5b505afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073891906116e4565b6005811115610749576107496115a0565b14156107e757604080820151602086015191517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481019290925273ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064015b600060405180830381600087803b1580156107ce57600080fd5b505af11580156107e2573d6000803e3d6000fd5b505050505b509392505050565b61081360405180606001604052806000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600260208181526040928390208351606081018552815486168152600182015486168184015292015490931691810191909152908401511561090357604080820151602086015191517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481019290925273ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401600060405180830381600087803b1580156108ea57600080fd5b505af11580156108fe573d6000803e3d6000fd5b505050505b61091281856060015185610d37565b6040517f92b4632c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616906392b4632c906106349087906004016115cf565b60015473ffffffffffffffffffffffffffffffffffffffff1633146109e2576001546040517f96cf9ed800000000000000000000000000000000000000000000000000000000815230600482015233602482015273ffffffffffffffffffffffffffffffffffffffff90911660448201526064015b60405180910390fd5b6000546001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b610aaa60405180606001604052806000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526002602081815260409283902083516060810185528154861681526001820154861681840152920154909316918101919091529084015115610b9a57604080820151602086015191517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481019290925273ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b505050505b610ba981856060015185610d37565b6040517e37f2bc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616906237f2bc90610bf99087906004016115cf565b606060405180830381600087803b158015610c1357600080fd5b505af1158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b9190611661565b9150610c5681610f85565b604081810151835191517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152336024820152604481019290925273ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016107b4565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d35576000546040517f1abc2f9800000000000000000000000000000000000000000000000000000000815230600482015233602482015273ffffffffffffffffffffffffffffffffffffffff90911660448201526064016109d9565b565b610d40826112fb565b6104ba5780156104ba57610d5382611318565b15610e705760208301516040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a919061157e565b6104ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f74616b654578747261436f6c6c61743a2062617365207866657220660000000060448201526064016109d9565b82516040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015610ee757600080fd5b505af1158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f919061157e565b6104ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f74616b654578747261436f6c6c61743a2021626173652078666572206600000060448201526064016109d9565b80516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610fee57600080fd5b505afa158015611002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110269190611705565b9050801561113d5781516040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401602060405180830381600087803b15801561109f57600080fd5b505af11580156110b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d7919061157e565b61113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5f72657475726e45786365737346756e64733a2071756f74652078666572206660448201526064016109d9565b60208201516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156111a957600080fd5b505afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190611705565b905080156104ba5760208301516040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401602060405180830381600087803b15801561125d57600080fd5b505af1158015611271573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611295919061157e565b6104ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5f72657475726e45786365737346756e64733a2062617365207866657220660060448201526064016109d9565b60006002826004811115611311576113116115a0565b1092915050565b6000600282600481111561132e5761132e6115a0565b1492915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461135757600080fd5b50565b60006020828403121561136c57600080fd5b813561137781611335565b9392505050565b604051610100810167ffffffffffffffff811182821017156113c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b60008082840360808112156113e357600080fd5b83356113ee81611335565b925060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561142057600080fd5b506040516060810181811067ffffffffffffffff8211171561146b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052602084013561147c81611335565b8152604084013561148c81611335565b6020820152606084013561149f81611335565b6040820152919491935090915050565b60008060008385036101408112156114c657600080fd5b84356114d181611335565b93506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0820181131561150557600080fd5b61150d61137e565b915060208601358252604086013560208301526060860135604083015260808601356005811061153c57600080fd5b8060608401525060a0860135608083015260c086013560a083015260e086013560c08301528086013560e0830152508092505061012084013590509250925092565b60006020828403121561159057600080fd5b8151801515811461137757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006101008201905082518252602083015160208301526040830151604083015260608301516005811061162c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b806060840152506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b60006060828403121561167357600080fd5b6040516060810181811067ffffffffffffffff821117156116bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000602082840312156116f657600080fd5b81516006811061137757600080fd5b60006020828403121561171757600080fd5b505191905056fea2646970667358221220f18b06d8362467d8cc26028aa4bec13239f7a165c20d4a1669535c58bd8f351d64736f6c63430008090033";

type BasicOptionMarketWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasicOptionMarketWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BasicOptionMarketWrapper__factory extends ContractFactory {
  constructor(...args: BasicOptionMarketWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BasicOptionMarketWrapper> {
    return super.deploy(overrides || {}) as Promise<BasicOptionMarketWrapper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BasicOptionMarketWrapper {
    return super.attach(address) as BasicOptionMarketWrapper;
  }
  override connect(signer: Signer): BasicOptionMarketWrapper__factory {
    return super.connect(signer) as BasicOptionMarketWrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicOptionMarketWrapperInterface {
    return new utils.Interface(_abi) as BasicOptionMarketWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BasicOptionMarketWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BasicOptionMarketWrapper;
  }
}
