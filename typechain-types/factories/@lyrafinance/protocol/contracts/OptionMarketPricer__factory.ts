/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  OptionMarketPricer,
  OptionMarketPricerInterface,
} from "../../../../@lyrafinance/protocol/contracts/OptionMarketPricer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
    ],
    name: "AlreadyInitialised",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "int256",
        name: "strikeCallDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "minDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "maxDelta",
        type: "int256",
      },
    ],
    name: "ForceCloseDeltaOutOfRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isBuy",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "newSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSkew",
        type: "uint256",
      },
    ],
    name: "ForceCloseSkewOutOfRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "pricingParams",
        type: "tuple",
      },
    ],
    name: "InvalidPricingParameters",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "capSkewsToAbs",
            type: "bool",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "tradeLimitParams",
        type: "tuple",
      },
    ],
    name: "InvalidTradeLimitParameters",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nominatedOwner",
        type: "address",
      },
    ],
    name: "OnlyNominatedOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "optionMarket",
        type: "address",
      },
    ],
    name: "OnlyOptionMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OnlyOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "int256",
        name: "strikeCallDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "minDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "maxDelta",
        type: "int256",
      },
    ],
    name: "TradeDeltaOutOfRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tradingCutoff",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "boardExpiry",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentTime",
        type: "uint256",
      },
    ],
    name: "TradingCutoffReached",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isBuy",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "vol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VolComponents",
        name: "currentVol",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "vol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VolComponents",
        name: "newVol",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "vol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VolComponents",
        name: "tradeBounds",
        type: "tuple",
      },
    ],
    name: "VolSkewOrBaseIvOutsideOfTradingBounds",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerNominated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "pricingParams",
        type: "tuple",
      },
    ],
    name: "PricingParametersSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "capSkewsToAbs",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "tradeLimitParams",
        type: "tuple",
      },
    ],
    name: "TradeLimitParametersSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "defaultVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forceCloseVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referenceSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticSkewAdjustment",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticVega",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVarianceCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticIvVariance",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct OptionMarketPricer.VarianceFeeParameters",
        name: "varianceFeeParams",
        type: "tuple",
      },
    ],
    name: "VarianceFeeParametersSet",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getPricingParams",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "pricingParameters",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pointA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pointB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "coefficient",
        type: "uint256",
      },
    ],
    name: "getTimeWeightedFee",
    outputs: [
      {
        internalType: "uint256",
        name: "timeWeightedFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTradeLimitParams",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "capSkewsToAbs",
            type: "bool",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "tradeLimitParameters",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "callDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVariance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vega",
            type: "uint256",
          },
        ],
        internalType: "struct OptionGreekCache.TradePricing",
        name: "pricing",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "newBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newSkew",
        type: "uint256",
      },
    ],
    name: "getTradeResult",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "preTradeAmmNetStdVega",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "postTradeAmmNetStdVega",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "vegaUtil",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "volTraded",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vegaUtilFee",
                type: "uint256",
              },
            ],
            internalType: "struct OptionMarketPricer.VegaUtilFeeComponents",
            name: "vegaUtilFee",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "varianceFeeCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vega",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vegaCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "skew",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "skewCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ivVariance",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ivVarianceCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "varianceFee",
                type: "uint256",
              },
            ],
            internalType: "struct OptionMarketPricer.VarianceFeeComponents",
            name: "varianceFee",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newBaseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newSkew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "callDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVariance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vega",
            type: "uint256",
          },
        ],
        internalType: "struct OptionGreekCache.TradePricing",
        name: "pricing",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "skew",
        type: "uint256",
      },
    ],
    name: "getVarianceFee",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "varianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vega",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVariance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVarianceCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "varianceFee",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VarianceFeeComponents",
        name: "varianceFeeComponents",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVarianceFeeParams",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "defaultVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forceCloseVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referenceSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticSkewAdjustment",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticVega",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVarianceCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticIvVariance",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VarianceFeeParameters",
        name: "varianceFeeParameters",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "callDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVariance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vega",
            type: "uint256",
          },
        ],
        internalType: "struct OptionGreekCache.TradePricing",
        name: "pricing",
        type: "tuple",
      },
    ],
    name: "getVegaUtilFee",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "vegaUtil",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "NAV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaUtilFee",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VegaUtilFeeComponents",
        name: "vegaUtilFeeComponents",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_optionMarket",
        type: "address",
      },
      {
        internalType: "contract OptionGreekCache",
        name: "_greekCache",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "boardBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "strikeSkew",
        type: "uint256",
      },
    ],
    name: "ivImpactForTrade",
    outputs: [
      {
        internalType: "uint256",
        name: "newBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newSkew",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "nominateNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nominatedOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pricingParams",
    outputs: [
      {
        internalType: "uint256",
        name: "optionPriceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionPriceFee1xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionPriceFee2xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spotPriceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spotPriceFee1xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spotPriceFee2xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vegaFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "standardSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "skewAdjustmentFactor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "_pricingParams",
        type: "tuple",
      },
    ],
    name: "setPricingParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "capSkewsToAbs",
            type: "bool",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "_tradeLimitParams",
        type: "tuple",
      },
    ],
    name: "setTradeLimitParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "defaultVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forceCloseVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referenceSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticSkewAdjustment",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticVega",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVarianceCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticIvVariance",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VarianceFeeParameters",
        name: "_varianceFeeParams",
        type: "tuple",
      },
    ],
    name: "setVarianceFeeParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tradeLimitParams",
    outputs: [
      {
        internalType: "int256",
        name: "minDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "minForceCloseDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "tradingCutoff",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBaseIV",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxBaseIV",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minVol",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxVol",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "absMinSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "absMaxSkew",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "capSkewsToAbs",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longCall",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortCallBase",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortCallQuote",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longPut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortPut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "boardId",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.Strike",
        name: "strike",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "boardBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "boardExpiry",
        type: "uint256",
      },
    ],
    name: "updateCacheAndGetTradeResult",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "preTradeAmmNetStdVega",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "postTradeAmmNetStdVega",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "vegaUtil",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "volTraded",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vegaUtilFee",
                type: "uint256",
              },
            ],
            internalType: "struct OptionMarketPricer.VegaUtilFeeComponents",
            name: "vegaUtilFee",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "varianceFeeCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vega",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vegaCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "skew",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "skewCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ivVariance",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ivVarianceCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "varianceFee",
                type: "uint256",
              },
            ],
            internalType: "struct OptionMarketPricer.VarianceFeeComponents",
            name: "varianceFee",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newBaseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newSkew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "varianceFeeParams",
    outputs: [
      {
        internalType: "uint256",
        name: "defaultVarianceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "forceCloseVarianceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "skewAdjustmentCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "referenceSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minimumStaticSkewAdjustment",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vegaCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minimumStaticVega",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ivVarianceCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minimumStaticIvVariance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001805460ff60a01b1916905534801561001d57600080fd5b50600080546001600160a01b0319163390811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1612b9b8061007b6000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80638da5cb5b116100cd578063da53763111610081578063f09a401611610066578063f09a401614610423578063f7b7a60c14610436578063ffae4b361461044957600080fd5b8063da53763114610387578063ea5b52251461038f57600080fd5b80639757b2fa116100b25780639757b2fa14610331578063ccfcdb2214610346578063d44558d21461036657600080fd5b80638da5cb5b146102e75780638e9cbe081461030757600080fd5b80635e2276d71161012457806379ba50971161010957806379ba5097146102b95780637f731ae0146102c1578063895ccf8d146102d457600080fd5b80635e2276d71461022b5780636f2fddc61461024b57600080fd5b806344b23bf21161015557806344b23bf21461019957806353a47bb7146101c65780635c2ddc321461020b57600080fd5b80630792061b146101715780631627540c14610186575b600080fd5b61018461017f366004611cb8565b61045e565b005b610184610194366004611cfa565b6104e7565b6101ac6101a7366004611f27565b610562565b604080519283526020830191909152015b60405180910390f35b6001546101e69073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bd565b61021e610219366004611f5e565b6105ec565b6040516101bd9190611fa6565b61023e610239366004612161565b610bf8565b6040516101bd91906121a2565b600454600554600654600754600854600954600a54600b54600c5461027598979695949392919089565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e0830152610100820152610120016101bd565b610184610db6565b6101846102cf3660046121fa565b610ed3565b6101846102e2366004611cb8565b61114f565b6000546101e69073ffffffffffffffffffffffffffffffffffffffff1681565b601954601a54601b54601c54601d54601e54601f5460205460215461027598979695949392919089565b6103396112be565b6040516101bd919061229c565b610359610354366004612300565b611367565b6040516101bd9190612337565b61037961037436600461237a565b6114aa565b6040519081526020016101bd565b610339611527565b600d54600e54600f546010546011546012546013546014546015546016546017546018546103c89b9a9998979695949392919060ff168c565b604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e08601526101008501526101208401526101408301521515610160820152610180016101bd565b6101846104313660046123ac565b6115cd565b61021e6104443660046123e5565b6116be565b610451611846565b6040516101bd91906124b5565b610466611923565b80516019908155602080830151601a55604080840151601b556060840151601c556080840151601d5560a0840151601e5560c0840151601f5560e0840151909155610100830151602155517f8196d36b161b7bf4e32a34268d55b3e5211a1aedfb069fffae9fe9f05485397b916104dc916124c4565b60405180910390a150565b6104ef611923565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020016104dc565b6000806000610583600460070154876080015161199e90919063ffffffff16565b90506000610592606483612552565b600c549091506000906105a69083906119c1565b8851909150156105d0576105ba828861258d565b6105c4828861258d565b945094505050506105e4565b6105da82886125a5565b6105c482886125a5565b935093915050565b6105f4611acc565b60025473ffffffffffffffffffffffffffffffffffffffff163314610672576002546040517f96a1986a00000000000000000000000000000000000000000000000000000000815230600482015233602482015273ffffffffffffffffffffffffffffffffffffffff90911660448201526064015b60405180910390fd5b60008061068486868960400151610562565b91509150600084600d600201544261069c919061258d565b119050866020015115610742578592506002876040015160028111156106c4576106c46125bc565b141580156106e05750601654821115806106e057506017548210155b1561073d5786516016546017546040517fc74168730000000000000000000000000000000000000000000000000000000081523060048201529215156024840152604483018590526064830191909152608482015260a401610669565b610963565b801561079457600f546040517fcb31f25c000000000000000000000000000000000000000000000000000000008152306004820152602481019190915260448101869052426064820152608401610669565b60006107a084846119c1565b885190915015610888576015548111806107bb575060115484115b806107c7575060135483115b156108835730886000015160405180606001604052806107f48d604001518c6119c190919063ffffffff16565b81526020018a81526020018c604001518152506040518060600160405280858152602001888152602001878152506040518060600160405280600d600801548152602001600d600401548152602001600d600601548152506040517f1a3600730000000000000000000000000000000000000000000000000000000081526004016106699594939291906125eb565b610961565b601454811080610899575060105484105b806108a5575060125483105b156109615730886000015160405180606001604052806108d28d604001518c6119c190919063ffffffff16565b81526020018a81526020018c604001518152506040518060600160405280858152602001888152602001878152506040518060600160405280600d600701548152602001600d600301548152602001600d600501548152506040517f1a3600730000000000000000000000000000000000000000000000000000000081526004016106699594939291906125eb565b505b60185460ff161561098b5761098861098083600d600a01546119d9565b6016546119ef565b91505b6003546040517ffde28b8300000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063fde28b83906109ea908c908c90899089908990600401612699565b60e060405180830381600087803b158015610a0457600080fd5b505af1158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c91906127f9565b9050876020015115610b2a57600288604001516002811115610a6057610a606125bc565b14158015610a6c575081155b15610b2557600e546060820151138015610aa15750600e54610a906012600a6129c4565b610a9a91906129d0565b8160600151125b15610b25576060810151600e5430919080610abe6012600a6129c4565b610ac891906129d0565b6040517f4814974600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602484019290925260448301526064820152608401610669565b610bdd565b600d5460608201511280610b595750600d54610b486012600a6129c4565b610b5291906129d0565b8160600151135b15610bdd576060810151600d5430919080610b766012600a6129c4565b610b8091906129d0565b6040517fd937376900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602484019290925260448301526064820152608401610669565b610be9888286866116be565b9450505050505b949350505050565b610c4060405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008460200151610c5357601954610c57565b601a545b905080610cad57604051806101000160405280600081526020018560c00151815260200160008152602001848152602001600081526020018560a001518152602001600081526020016000815250915050610daf565b601e5460c0850151600091610cc291906119c1565b601f54610ccf919061258d565b90506000610d0b601960020154610d05610ced6019600301546119fe565b610cf6896119fe565b610d0091906129d0565b611ab4565b906119c1565b601d54610d18919061258d565b60205460a0880151919250600091610d2f916119c1565b602154610d3c919061258d565b90506000610d638960800151610d0584610d0587610d058a8c6119c190919063ffffffff16565b90506040518061010001604052808681526020018960c0015181526020018581526020018881526020018481526020018960a00151815260200183815260200182815250955050505050505b9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e2f576001546040517f96cf9ed800000000000000000000000000000000000000000000000000000000815230600482015233602482015273ffffffffffffffffffffffffffffffffffffffff9091166044820152606401610669565b6000546001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b610edb611923565b8051670de0b6b3a764000012801590610f005750670de0b6b3a7640000816020015113155b8015610f10575060008160400151115b8015610f235750620d2f00816040015111155b8015610f3a5750678ac7230489e800008160600151105b8015610f4a575060008160800151115b8015610f62575068056bc75e2d631000008160800151105b8015610f795750678ac7230489e800008160a00151105b8015610f89575060008160c00151115b8015610fa05750678ac7230489e800008160c00151105b8015610fb157506000816101000151115b8015610fc657508060c0015181610140015110155b8015610fdb57508060a0015181610120015111155b6110155730816040517f5d884b5c000000000000000000000000000000000000000000000000000000008152600401610669929190612a44565b8051600d9081556020820151600e55604080830151600f556060830151601055608083015160115560a083015160125560c083015160135560e0830151601455610100830151601555610120830151601655610140830151601755610160830151601880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055517f23e2f19ae7640ea47fd0a4d2986c05242094dc86e81df3c445f1f86c4ffd2470916104dc918154815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154610140820152600b9091015460ff1615156101608201526101800190565b611157611923565b8051680ad78ebc5ac62000001080159061117d5750671bc16d674ec80000816060015111155b8015611190575062093a80816020015110155b80156111b1575060208101516111a99062093a8061258d565b816040015110155b80156111c4575062093a80816080015110155b80156111e5575060808101516111dd9062093a8061258d565b8160a0015110155b80156111f5575060008160e00151115b801561120f5750683635c9adc5dea0000081610100015111155b6112495730816040517f2abe92ff000000000000000000000000000000000000000000000000000000008152600401610669929190612a6f565b8051600490815560208201516005556040808301516006556060830151600755608083015160085560a083015160095560c0830151600a5560e0830151600b55610100830151600c55517f711f183bddaf64ef835c226f41269be5151112d393dbb05c83746bff24390a2a916104dc916124c4565b61130d6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5060408051610120810182526019548152601a54602080830191909152601b5492820192909252601c546060820152601d546080820152601e5460a0820152601f5460c0820152905460e082015260215461010082015290565b6113a06040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6113ad8260400151611ab4565b6113ba8360200151611ab4565b10611409576040518060c00160405280836020015181526020018360400151815260200160008152602001836080015181526020018460e0015160a001518152602001600081525090506114a4565b60006114388460e0015160a001516114326114278660400151611ab4565b6080870151906119c1565b9061199e565b9050600061145c8560800151610d05846004600601546119c190919063ffffffff16565b90506040518060c001604052808560200151815260200185604001518152602001838152602001856080015181526020018660e0015160a00151815260200182815250925050505b92915050565b6000806114b742876125a5565b90508481116114c95782915050610bf0565b61151d6114d686866125a5565b6114e26012600a6129c4565b6114ec88856125a5565b6114f69190612aef565b6115009190612552565b61150c6012600a6129c4565b611516919061258d565b84906119c1565b9695505050505050565b6115766040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50604080516101208101825260045481526005546020820152600654918101919091526007546060820152600854608082015260095460a0820152600a5460c0820152600b5460e0820152600c5461010082015290565b6115d5611923565b60015474010000000000000000000000000000000000000000900460ff161561162c576040517f161b906f000000000000000000000000000000000000000000000000000000008152306004820152602401610669565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556002805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560038054929093169116179055565b6116c6611acc565b608085015184516000916116da91906119c1565b905060006116fd8760a001516004600101546004600201546004600001546114aa565b9050600061171f8860a0015160048001546004600501546004600301546114aa565b9050600061172d83856119c1565b905060006117558a60800151610d058c610100015160000151866119c190919063ffffffff16565b905060006117638b8b611367565b905060006117728c8c8b610bf8565b905060008160e001518360a00151858761178c919061258d565b611796919061258d565b6117a0919061258d565b905060008d60000151156117bf576117b8828a61258d565b90506117df565b888211156117d2575087905060006117df565b6117dc828a6125a5565b90505b6040518061016001604052808f6080015181526020018a81526020018781526020018681526020018581526020018481526020018381526020018281526020018e6080015181526020018d81526020018c8152509950505050505050505050949350505050565b6118ac60405180610180016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506040805161018081018252600d548152600e546020820152600f54918101919091526010546060820152601154608082015260125460a082015260135460c082015260145460e082015260155461010082015260165461012082015260175461014082015260185460ff16151561016082015290565b60005473ffffffffffffffffffffffffffffffffffffffff16331461199c576000546040517f1abc2f9800000000000000000000000000000000000000000000000000000000815230600482015233602482015273ffffffffffffffffffffffffffffffffffffffff9091166044820152606401610669565b565b6000816119ad6012600a6129c4565b6119b79085612aef565b610daf9190612552565b60006119cf6012600a6129c4565b6119b78385612aef565b60008183106119e85781610daf565b5090919050565b60008183116119e85781610daf565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115611ab0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610669565b5090565b6000808212611ac357816114a4565b6114a482612b2c565b60405180610160016040528060008152602001600081526020016000815260200160008152602001611b2d6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001611b7a60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051610120810167ffffffffffffffff81118282101715611bee577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b604051610180810167ffffffffffffffff81118282101715611bee577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006101208284031215611c5257600080fd5b611c5a611ba3565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525092915050565b60006101208284031215611ccb57600080fd5b610daf8383611c3f565b73ffffffffffffffffffffffffffffffffffffffff81168114611cf757600080fd5b50565b600060208284031215611d0c57600080fd5b8135610daf81611cd5565b80358015158114611d2757600080fd5b919050565b803560038110611d2757600080fd5b803560058110611d2757600080fd5b600060c08284031215611d5c57600080fd5b60405160c0810181811067ffffffffffffffff82111715611da6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b600060a08284031215611dfd57600080fd5b60405160a0810181811067ffffffffffffffff82111715611e47577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b60006102408284031215611e9557600080fd5b611e9d611ba3565b9050611ea882611d17565b8152611eb660208301611d17565b6020820152611ec760408301611d2c565b6040820152611ed860608301611d3b565b60608201526080820135608082015260a082013560a082015260c082013560c0820152611f088360e08401611d4a565b60e0820152611f1b836101a08401611deb565b61010082015292915050565b60008060006102808486031215611f3d57600080fd5b611f478585611e82565b956102408501359550610260909401359392505050565b6000806000806103a08587031215611f7557600080fd5b611f7f8686611c3f565b9350611f8f866101208701611e82565b939693955050505061036082013591610380013590565b60006102e0820190508251825260208301516020830152604083015160408301526060830151606083015260808301516120186080840182805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b5060a083015161014061207681850183805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b60c085015161024085015260e08501516102608501526101008501516102808501526101208501516102a0850152808501516102c0850152505092915050565b600060e082840312156120c857600080fd5b60405160e0810181811067ffffffffffffffff82111715612112577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201525092915050565b6000806000610340848603121561217757600080fd5b6121818585611e82565b92506121918561024086016120b6565b915061032084013590509250925092565b61010081016114a48284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b6000610180828403121561220d57600080fd5b612215611bf4565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140808401358183015250610160612291818501611d17565b908201529392505050565b61012081016114a48284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b600080610320838503121561231457600080fd5b61231e8484611e82565b915061232e8461024085016120b6565b90509250929050565b60c081016114a48284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b6000806000806080858703121561239057600080fd5b5050823594602084013594506040840135936060013592509050565b600080604083850312156123bf57600080fd5b82356123ca81611cd5565b915060208301356123da81611cd5565b809150509250929050565b60008060008061036085870312156123fc57600080fd5b6124068686611e82565b93506124168661024087016120b6565b939693955050505061032082013591610340013590565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201518184015250610160808201516124af8285018215159052565b50505050565b61018081016114a4828461242d565b8154815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015461010082015261012081016114a4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082612588577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156125a0576125a0612523565b500190565b6000828210156125b7576125b7612523565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff861681528415156020820152610160810161263260408301868051825260208082015190830152604090810151910152565b835160a0830152602084015160c0830152604084015160e08301528251610100830152602083015161012083015260408301516101408301529695505050505050565b60038110612685576126856125bc565b9052565b60058110612685576126856125bc565b6103c081016126fd8288805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b85511515610120830152602086015115156101408301526040860151612727610160840182612675565b50606086015161273b610180840182612689565b506080868101516101a084015260a0808801516101c085015260c08801516101e085015260e08801518051610200860152602081015161022086015260408101516102408601526060810151610260860152918201516102808501528101516102a08401525061010086015180516102c084015260208101516102e084015260408101516103008401526060810151610320840152608081015161034084015250846103608301528361038083015261151d6103a083018415159052565b600060e0828403121561280b57600080fd5b60405160e0810181811067ffffffffffffffff82111715612855577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b600181815b808511156128fd57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156128e3576128e3612523565b808516156128f057918102915b93841c93908002906128a9565b509250929050565b600082612914575060016114a4565b81612921575060006114a4565b816001811461293757600281146129415761295d565b60019150506114a4565b60ff84111561295257612952612523565b50506001821b6114a4565b5060208310610133831016604e8410600b8410161715612980575081810a6114a4565b61298a83836128a4565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156129bc576129bc612523565b029392505050565b6000610daf8383612905565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615612a0a57612a0a612523565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615612a3e57612a3e612523565b50500390565b73ffffffffffffffffffffffffffffffffffffffff831681526101a08101610daf602083018461242d565b73ffffffffffffffffffffffffffffffffffffffff831681526101408101610daf6020830184805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b2757612b27612523565b500290565b60007f8000000000000000000000000000000000000000000000000000000000000000821415612b5e57612b5e612523565b506000039056fea2646970667358221220c828a08f1e19272b6f02f27c0461f959e3d71d1b2577b18d6d84c09f38c6ed4264736f6c63430008090033";

type OptionMarketPricerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptionMarketPricerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptionMarketPricer__factory extends ContractFactory {
  constructor(...args: OptionMarketPricerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OptionMarketPricer> {
    return super.deploy(overrides || {}) as Promise<OptionMarketPricer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OptionMarketPricer {
    return super.attach(address) as OptionMarketPricer;
  }
  override connect(signer: Signer): OptionMarketPricer__factory {
    return super.connect(signer) as OptionMarketPricer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptionMarketPricerInterface {
    return new utils.Interface(_abi) as OptionMarketPricerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptionMarketPricer {
    return new Contract(address, _abi, signerOrProvider) as OptionMarketPricer;
  }
}
