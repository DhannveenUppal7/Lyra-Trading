/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  MathTest,
  MathTestInterface,
} from "../../../../../@lyrafinance/protocol/contracts/test-helpers/MathTest";

const _abi = [
  {
    inputs: [],
    name: "ExpOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "LnNegativeUndefined",
    type: "error",
  },
  {
    inputs: [],
    name: "Overflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "expV1",
    outputs: [
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "expV2",
    outputs: [
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "lnV1",
    outputs: [
      {
        internalType: "int256",
        name: "r",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "lnV2",
    outputs: [
      {
        internalType: "int256",
        name: "r",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e0e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634e31e3cb1461005157806367536ecc14610076578063b65c36c314610089578063da79ba861461009c575b600080fd5b61006461005f366004610988565b6100af565b60405190815260200160405180910390f35b610064610084366004610988565b6100c0565b610064610097366004610988565b6100cb565b6100646100aa366004610988565b6100d6565b60006100ba826100e1565b92915050565b60006100ba826102b9565b60006100ba82610330565b60006100ba826105e2565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c1821361011257506000919050565b680755bf798b4a1bf1e58212610154576040517fa37bfec900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b6d2c06887d92262d378b9593af35346c09791803c2923d5d9721c3da80929091056b8000000000000000000000000190921d6bb17217f7d1cf79abc9e3b39881029095039081018102606090811d6d019dd9374d4315c8464a395fc09881017fffffffffffffffffffffffffffffffffffffffe400ce74ed9455bc9156515002840102821d93840193016d29c9ad45cc0beb0a2ff097a7bab40192909202821d6dcf3c27b2e487711b467e90f19320016c22fcd1cffa6fa000f6e27eeca082018202831d6d022f98fbc368092c79210d196fa0018202831d6d13aaae3ba38de06adc25ebfacc0901820290921d6d624dcbeb5e25df590e409325888a010279d835ebba824c98fb19256146f65c000000000000000000000000010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b6000816000136102cc576100ba8261065e565b6102fe670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd76109ff565b82121561030d57506000919050565b6100ba61032161031c84610abb565b61065e565b670de0b6b3a7640000906107f5565b600060018212156103a8576000821215610376576040517f906dbb0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606060016fffffffffffffffffffffffffffffffff851160071b85811c67ffffffffffffffff1060061b1785811c63ffffffff1060051b1785811c61ffff1060041b1785811c60ff10600390811b90911786811c600f1060021b1786811c909110821b1785811c919091111703609f8181039490941b90931c6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d7fffffffffffffffffffffffffffffffffffffff73c0c716a594e00d54e3c4cbc9018302821d7ffffffffffffffffffffffffffffffffffffffdc7b88c420e53a9890533129f6f01830290911d7fffffffffffffffffffffffffffffffffffffff465fda27eb4d63ded474e5f832019091027ffffffffffffffff5f6af8f7b3396644f18e157960000000000000000000000000105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b393909302929092017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b60008080805b60088110156106555760006105fc846102b9565b905061062661060b8288610af4565b6106158389610b68565b6106209060026109ff565b90610814565b6106309085610af4565b9250838314156106405750610655565b829350508061064e90610bdc565b90506105e8565b50909392505050565b6000816106745750670de0b6b3a7640000919050565b610687670de0b6b3a76400006064610bf7565b82111561071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f63616e6e6f742068616e646c65206578706f6e656e747320677265617465722060448201527f7468616e20313030000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b6000670de0b6b3a764000061073f61073a8567099e8db03256ce5d6107f5565b61082c565b6107499190610c16565b90506000610758826002610d0e565b9050600061076e67099e8db03256ce5d84610bf7565b6107789086610d1a565b9050670de0b6b3a7640000600060105b60ff8116156107df57670de0b6b3a76400006107b16107aa60ff841687610c16565b859061084a565b6107bb9190610d31565b9250818314156107ca576107df565b829150806107d781610d49565b915050610788565b506107ea8285610bf7565b979650505050505050565b600061080d83836108086012600a610d0e565b610862565b9392505050565b600061080d83836108276012600a610d0e565b6108bb565b6000610840670de0b6b3a764000083610d66565b6100ba9083610d1a565b600061080d838361085d6012600a610d0e565b6108e9565b6000808361087184600a610bf7565b61087b9087610bf7565b6108859190610c16565b90506005610894600a83610d66565b106108a7576108a4600a82610d31565b90505b6108b2600a82610c16565b95945050505050565b600080836108ca84600a6109ff565b6108d490876109ff565b6108de9190610d7a565b90506108b281610901565b6000806108f7600a84610c16565b61087b8587610bf7565b6000806005610911600a85610dc4565b1261091e5750600a610972565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb61094a600a85610dc4565b1361097257507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65b600a61097e8285610af4565b61080d9190610d7a565b60006020828403121561099a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615610a4057610a406109d0565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615610a7b57610a7b6109d0565b60008712925087820587128484161615610a9757610a976109d0565b87850587128184161615610aad57610aad6109d0565b505050929093029392505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610aed57610aed6109d0565b5060000390565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615610b2e57610b2e6109d0565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615610b6257610b626109d0565b50500190565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615610ba257610ba26109d0565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615610bd657610bd66109d0565b50500390565b6000600019821415610bf057610bf06109d0565b5060010190565b6000816000190483118215151615610c1157610c116109d0565b500290565b600082610c2557610c256109a1565b500490565b600181815b80851115610c65578160001904821115610c4b57610c4b6109d0565b80851615610c5857918102915b93841c9390800290610c2f565b509250929050565b600082610c7c575060016100ba565b81610c89575060006100ba565b8160018114610c9f5760028114610ca957610cc5565b60019150506100ba565b60ff841115610cba57610cba6109d0565b50506001821b6100ba565b5060208310610133831016604e8410600b8410161715610ce8575081810a6100ba565b610cf28383610c2a565b8060001904821115610d0657610d066109d0565b029392505050565b600061080d8383610c6d565b600082821015610d2c57610d2c6109d0565b500390565b60008219821115610d4457610d446109d0565b500190565b600060ff821680610d5c57610d5c6109d0565b6000190192915050565b600082610d7557610d756109a1565b500690565b600082610d8957610d896109a1565b60001983147f800000000000000000000000000000000000000000000000000000000000000083141615610dbf57610dbf6109d0565b500590565b600082610dd357610dd36109a1565b50079056fea2646970667358221220da2de5784fc8eca5c1e16a6dcbae073028f41ecb724e3e6e67437d1fc0ea453f64736f6c63430008090033";

type MathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathTest__factory extends ContractFactory {
  constructor(...args: MathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MathTest> {
    return super.deploy(overrides || {}) as Promise<MathTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MathTest {
    return super.attach(address) as MathTest;
  }
  override connect(signer: Signer): MathTest__factory {
    return super.connect(signer) as MathTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathTestInterface {
    return new utils.Interface(_abi) as MathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathTest {
    return new Contract(address, _abi, signerOrProvider) as MathTest;
  }
}
