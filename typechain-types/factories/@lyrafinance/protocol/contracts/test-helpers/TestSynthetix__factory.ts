/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  TestSynthetix,
  TestSynthetixInterface,
} from "../../../../../@lyrafinance/protocol/contracts/test-helpers/TestSynthetix";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "exchangeForAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "sourceCurrencyKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sourceAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "destinationCurrencyKey",
        type: "bytes32",
      },
    ],
    name: "Exchange",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "contract ITestERC20",
        name: "baseAsset",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "addBaseAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "addressResolver",
    outputs: [
      {
        internalType: "contract IAddressResolver",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "baseAssets",
    outputs: [
      {
        internalType: "contract ITestERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sourceCurrencyKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "sourceAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "destinationCurrencyKey",
        type: "bytes32",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "uint256",
        name: "amountReceived",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "exchangeForAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "sourceCurrencyKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "sourceAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "destinationCurrencyKey",
        type: "bytes32",
      },
    ],
    name: "exchangeOnBehalf",
    outputs: [
      {
        internalType: "uint256",
        name: "amountReceived",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "exchangeForAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "sourceCurrencyKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "sourceAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "destinationCurrencyKey",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "exchangeOnBehalfWithTracking",
    outputs: [
      {
        internalType: "uint256",
        name: "amountReceived",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract SynthetixAdapter",
        name: "_synthetixAdapter",
        type: "address",
      },
      {
        internalType: "contract ITestERC20",
        name: "_quoteAsset",
        type: "address",
      },
      {
        internalType: "contract IAddressResolver",
        name: "_addressResolver",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "markets",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526005805460ff1916905534801561001a57600080fd5b506114358061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80637564912b116100765780639b3b051a1161005b5780639b3b051a146101b1578063c836fa0a146101c4578063ee52a2f3146101d757600080fd5b80637564912b1461015a57806391e56b681461019057600080fd5b806305a2ee2a146100a8578063158ef93e146100f2578063184b95591461010f5780635b87280b14610124575b600080fd5b6001546100c89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6005546100ff9060ff1681565b60405190151581526020016100e9565b61012261011d366004610fb4565b6101ea565b005b6100c8610132366004610fff565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6100c8610168366004610fff565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6101a361019e366004611018565b6102eb565b6040519081526020016100e9565b6101226101bf366004611076565b610519565b6101a36101d236600461109d565b61067a565b6101a36101e53660046110d8565b610e86565b60055460ff161561025c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f416c726561647920696e697469616c697a65640000000000000000000000000060448201526064015b60405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600280549385169382169390931790925560018054919093169116178155600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b6001546040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f44656c6567617465417070726f76616c73000000000000000000000000000000600482015260009173ffffffffffffffffffffffffffffffffffffffff16906321f8a7219060240160206040518083038186803b15801561037557600080fd5b505afa158015610389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ad9190611104565b6040517fd3fb5e3700000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8981166024830152919091169063d3fb5e379060440160206040518083038186803b15801561041c57600080fd5b505afa158015610430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104549190611128565b6104ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6f7420617070726f76656420746f20616374206f6e20626568616c660000006044820152606401610253565b6040805133815260208101889052908101869052606081018590527f21e60f3189350d5335ac262321d36256f31672072e541960c0993c0151c4a76b9060800160405180910390a161050e8787878761067a565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216610596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332302063616e6e6f742068617665207a65726f206164647265737300006044820152606401610253565b73ffffffffffffffffffffffffffffffffffffffff8116610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d61726b65742063616e6e6f742068617665207a65726f2061646472657373006044820152606401610253565b600092835260036020908152604080852080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff96871617909155600490925290932080549093169116179055565b6001546040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f44656c6567617465417070726f76616c73000000000000000000000000000000600482015260009182918291829173ffffffffffffffffffffffffffffffffffffffff909116906321f8a7219060240160206040518083038186803b15801561070c57600080fd5b505afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107449190611104565b6040517fd3fb5e3700000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8a81166024830152919091169063d3fb5e379060440160206040518083038186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190611128565b610851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6f7420617070726f76656420746f20616374206f6e20626568616c660000006044820152606401610253565b867f73555344000000000000000000000000000000000000000000000000000000001415610915576002546040517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015260248201899052670de0b6b3a7640000955090911690639dc29fac90604401600060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b50505050610b6e565b60008781526004602052604090205473ffffffffffffffffffffffffffffffffffffffff16806109a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f696e76616c696420736f757263652063757272656e6379206b657900000000006044820152606401610253565b600080546040517fcfbe7f4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063cfbe7f449060240160a06040518083038186803b158015610a0d57600080fd5b505afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a45919061114a565b60008a81526003602052604090205490915073ffffffffffffffffffffffffffffffffffffffff1680610ad4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332302063616e6e6f742068617665207a65726f206164647265737300006044820152606401610253565b6040517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152602482018b9052821690639dc29fac90604401600060405180830381600087803b158015610b4457600080fd5b505af1158015610b58573d6000803e3d6000fd5b5050505081600001519550816080015194505050505b847f73555344000000000000000000000000000000000000000000000000000000001415610c54576000610ba28785610ee5565b9050610bc0610bb984670de0b6b3a7640000611210565b8290610ee5565b6002546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152602482018490529297509116906340c10f1990604401600060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b5050505050610e7b565b60008581526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1680610ce0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f696e76616c69642064657374696e6174696f6e2063757272656e6379206b65796044820152606401610253565b600080546040517fcfbe7f4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063cfbe7f449060240160a06040518083038186803b158015610d4c57600080fd5b505afa158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d84919061114a565b6000888152600360205260409020548151945090915073ffffffffffffffffffffffffffffffffffffffff1684610dbd57816060015194505b6000610dd385610dcd8c8a610ee5565b90610f06565b9050610dea610bb987670de0b6b3a7640000611210565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e8116600483015260248201839052919950908316906340c10f1990604401600060405180830381600087803b158015610e5e57600080fd5b505af1158015610e72573d6000803e3d6000fd5b50505050505050505b505050949350505050565b6040805133815260208101859052908101839052606081018290526000907f21e60f3189350d5335ac262321d36256f31672072e541960c0993c0151c4a76b9060800160405180910390a1610edd3385858561067a565b949350505050565b6000610efd8383610ef86012600a611347565b610f1e565b90505b92915050565b6000610efd8383610f196012600a611347565b610f76565b600080610f2c600a84611382565b610f368587611396565b610f409190611382565b90506005610f4f600a836113d3565b10610f6257610f5f600a826113e7565b90505b610f6d600a82611382565b95945050505050565b60008083610f8584600a611396565b610f369087611396565b73ffffffffffffffffffffffffffffffffffffffff81168114610fb157600080fd5b50565b600080600060608486031215610fc957600080fd5b8335610fd481610f8f565b92506020840135610fe481610f8f565b91506040840135610ff481610f8f565b809150509250925092565b60006020828403121561101157600080fd5b5035919050565b60008060008060008060c0878903121561103157600080fd5b863561103c81610f8f565b9550602087013594506040870135935060608701359250608087013561106181610f8f565b8092505060a087013590509295509295509295565b60008060006060848603121561108b57600080fd5b833592506020840135610fe481610f8f565b600080600080608085870312156110b357600080fd5b84356110be81610f8f565b966020860135965060408601359560600135945092505050565b6000806000606084860312156110ed57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561111657600080fd5b815161112181610f8f565b9392505050565b60006020828403121561113a57600080fd5b8151801515811461112157600080fd5b600060a0828403121561115c57600080fd5b60405160a0810181811067ffffffffffffffff821117156111a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611222576112226111e1565b500390565b600181815b8085111561128057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611266576112666111e1565b8085161561127357918102915b93841c939080029061122c565b509250929050565b60008261129757506001610f00565b816112a457506000610f00565b81600181146112ba57600281146112c4576112e0565b6001915050610f00565b60ff8411156112d5576112d56111e1565b50506001821b610f00565b5060208310610133831016604e8410600b8410161715611303575081810a610f00565b61130d8383611227565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561133f5761133f6111e1565b029392505050565b6000610efd8383611288565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261139157611391611353565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113ce576113ce6111e1565b500290565b6000826113e2576113e2611353565b500690565b600082198211156113fa576113fa6111e1565b50019056fea26469706673582212208fe5da825ae61ec52802f50b575f1838854e2670903dba72d51e5169e6116a5964736f6c63430008090033";

type TestSynthetixConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSynthetixConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSynthetix__factory extends ContractFactory {
  constructor(...args: TestSynthetixConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestSynthetix> {
    return super.deploy(overrides || {}) as Promise<TestSynthetix>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestSynthetix {
    return super.attach(address) as TestSynthetix;
  }
  override connect(signer: Signer): TestSynthetix__factory {
    return super.connect(signer) as TestSynthetix__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSynthetixInterface {
    return new utils.Interface(_abi) as TestSynthetixInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestSynthetix {
    return new Contract(address, _abi, signerOrProvider) as TestSynthetix;
  }
}
