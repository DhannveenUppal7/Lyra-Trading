/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  MockAggregatorV2V3,
  MockAggregatorV2V3Interface,
} from "../../../../../../@lyrafinance/protocol/contracts/test-helpers/MockAggregatorV2V3.sol/MockAggregatorV2V3";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "allRoundDataShouldRevert",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "entries",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256",
      },
    ],
    name: "getAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256",
      },
    ],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "keyDecimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundDataShouldRevert",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundId",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_shouldRevert",
        type: "bool",
      },
    ],
    name: "setAllRoundDataShouldRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "setLatestAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "setLatestAnswerWithRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_shouldRevert",
        type: "bool",
      },
    ],
    name: "setLatestRoundDataShouldRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600080546001600160581b031916905534801561002057600080fd5b50610950806100306000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639a6fc8f511610097578063b633620c11610066578063b633620c14610451578063e9c58f85146104c0578063fc8f20a7146104d3578063feaf968c146104e057600080fd5b80639a6fc8f514610309578063b19cafe114610353578063b30906d414610398578063b5ab58dc146103e457600080fd5b8063668a0f02116100d3578063668a0f02146101b35780637a1395aa146101d15780637b28d483146102215780638cd221c9146102d857600080fd5b80632c746cae146101055780632f1b9a0c14610137578063313ce5671461015957806357d4f5e014610172575b600080fd5b600054610120906a0100000000000000000000900460ff1681565b60405160ff90911681526020015b60405180910390f35b60025461014990610100900460ff1681565b604051901515815260200161012e565b6000546a0100000000000000000000900460ff16610120565b6101b16101803660046107d3565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b005b60005469ffffffffffffffffffff165b60405190815260200161012e565b6101b16101df3660046107fc565b6000805460ff9092166a0100000000000000000000027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff909216919091179055565b6101b161022f36600461083e565b600080547fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000090811669ffffffffffffffffffff93841690811783556040805160a0810182528281526020808201988952818301888152606083019889526080830185815294875260019182905292909520905181548516908716178155965193870193909355915160028601559251600385015551600490930180549092169216919091179055565b6000546102ee9069ffffffffffffffffffff1681565b60405169ffffffffffffffffffff909116815260200161012e565b61031c610317366004610873565b6104e8565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00161012e565b6101b16103613660046107d3565b60028054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055565b61031c6103a636600461088e565b60016020819052600091825260409091208054918101546002820154600383015460049093015469ffffffffffffffffffff94851694929391921685565b6101c36103f236600461088e565b600090815260016020818152604092839020835160a081018552815469ffffffffffffffffffff908116825293820154928101839052600282015494810194909452600381015460608501526004015490911660809092019190915290565b6101c361045f36600461088e565b600090815260016020818152604092839020835160a081018552815469ffffffffffffffffffff9081168252938201549281019290925260028101549382019390935260038301546060820181905260049093015490911660809091015290565b6101b16104ce3660046108a7565b610652565b6002546101499060ff1681565b61031c61072b565b600254600090819081908190819060ff1615610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f676574526f756e6444617461207265766572746564000000000000000000000060448201526064015b60405180910390fd5b69ffffffffffffffffffff808716600090815260016020818152604092839020835160a0810185528154861681529281015491830191909152600281015492820192909252600382015460608201819052600490920154909216608083015261062a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f20646174612070726573656e740000000000000000000000000000000000604482015260640161055c565b8051602082015160408301516060840151608090940151929a91995097509195509350915050565b6000805469ffffffffffffffffffff16908061066d836108c9565b82546101009290920a69ffffffffffffffffffff8181021990931691831602179091556040805160a0810182526000805484168083526020808401988952838501888152606085019889526080850183815292845260019182905294909220925183547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000009081169187169190911784559751918301919091559151600282015593516003850155516004909301805490941692169190911790915550565b6000806000806000600260019054906101000a900460ff16156107aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6c6174657374526f756e64446174612072657665727465640000000000000000604482015260640161055c565b6107c261031760005469ffffffffffffffffffff1690565b945094509450945094509091929394565b6000602082840312156107e557600080fd5b813580151581146107f557600080fd5b9392505050565b60006020828403121561080e57600080fd5b813560ff811681146107f557600080fd5b803569ffffffffffffffffffff8116811461083957600080fd5b919050565b60008060006060848603121561085357600080fd5b833592506020840135915061086a6040850161081f565b90509250925092565b60006020828403121561088557600080fd5b6107f58261081f565b6000602082840312156108a057600080fd5b5035919050565b600080604083850312156108ba57600080fd5b50508035926020909101359150565b600069ffffffffffffffffffff80831681811415610910577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600101939250505056fea26469706673582212202f45264b869a5118bbf0d2835342b3d83c756c1a24e2fec8ce1efc1b28ce695964736f6c63430008090033";

type MockAggregatorV2V3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAggregatorV2V3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAggregatorV2V3__factory extends ContractFactory {
  constructor(...args: MockAggregatorV2V3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockAggregatorV2V3> {
    return super.deploy(overrides || {}) as Promise<MockAggregatorV2V3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockAggregatorV2V3 {
    return super.attach(address) as MockAggregatorV2V3;
  }
  override connect(signer: Signer): MockAggregatorV2V3__factory {
    return super.connect(signer) as MockAggregatorV2V3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAggregatorV2V3Interface {
    return new utils.Interface(_abi) as MockAggregatorV2V3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAggregatorV2V3 {
    return new Contract(address, _abi, signerOrProvider) as MockAggregatorV2V3;
  }
}
