/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  TestERC20SetDecimals,
  TestERC20SetDecimalsInterface,
} from "../../../../../@lyrafinance/protocol/contracts/test-helpers/TestERC20SetDecimals";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "permit",
        type: "bool",
      },
    ],
    name: "permitMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "permitted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200132738038062001327833981016040819052620000349162000217565b8251839083906200004d906003906020850190620000a4565b50805162000063906004906020840190620000a4565b5050336000908152600560205260409020805460ff19166001179055506200009b816006805460ff191660ff92909216919091179055565b505050620002d9565b828054620000b2906200029c565b90600052602060002090601f016020900481019282620000d6576000855562000121565b82601f10620000f157805160ff191683800117855562000121565b8280016001018555821562000121579182015b828111156200012157825182559160200191906001019062000104565b506200012f92915062000133565b5090565b5b808211156200012f576000815560010162000134565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200017257600080fd5b81516001600160401b03808211156200018f576200018f6200014a565b604051601f8301601f19908116603f01168101908282118183101715620001ba57620001ba6200014a565b81604052838152602092508683858801011115620001d757600080fd5b600091505b83821015620001fb5785820183015181830184015290820190620001dc565b838211156200020d5760008385830101525b9695505050505050565b6000806000606084860312156200022d57600080fd5b83516001600160401b03808211156200024557600080fd5b620002538783880162000160565b945060208601519150808211156200026a57600080fd5b50620002798682870162000160565b925050604084015160ff811681146200029157600080fd5b809150509250925092565b600181811c90821680620002b157607f821691505b60208210811415620002d357634e487b7160e01b600052602260045260246000fd5b50919050565b61103e80620002e96000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636cc301e311610097578063a457c2d711610066578063a457c2d714610211578063a9059cbb14610224578063c465a5d514610237578063dd62ed3e1461024a57600080fd5b80636cc301e31461019d57806370a08231146101c057806395d89b41146101f65780639dc29fac146101fe57600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461017557806340c10f191461018857600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610290565b60405161010f9190610dc3565b60405180910390f35b61012b610126366004610e5f565b610322565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610e89565b610338565b60065460405160ff909116815260200161010f565b61012b610183366004610e5f565b610409565b61019b610196366004610e5f565b610452565b005b61012b6101ab366004610ec5565b60056020526000908152604090205460ff1681565b61013f6101ce366004610ec5565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101026104e4565b61019b61020c366004610e5f565b6104f3565b61012b61021f366004610e5f565b610581565b61012b610232366004610e5f565b61063f565b61019b610245366004610ee7565b61064c565b61013f610258366004610f23565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461029f90610f56565b80601f01602080910402602001604051908101604052809291908181526020018280546102cb90610f56565b80156103185780601f106102ed57610100808354040283529160200191610318565b820191906000526020600020905b8154815290600101906020018083116102fb57829003601f168201915b5050505050905090565b600061032f338484610726565b50600192915050565b60006103458484846108a6565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152902054828110156103f15760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103fe8533858403610726565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161032f91859061044d908690610fd9565b610726565b3360009081526005602052604090205460ff166104d65760405162461bcd60e51b8152602060048201526024808201527f546573744552433230536574446563696d616c733a206f6e6c79207065726d6960448201527f747465640000000000000000000000000000000000000000000000000000000060648201526084016103e8565b6104e08282610b0c565b5050565b60606004805461029f90610f56565b3360009081526005602052604090205460ff166105775760405162461bcd60e51b8152602060048201526024808201527f546573744552433230536574446563696d616c733a206f6e6c79207065726d6960448201527f747465640000000000000000000000000000000000000000000000000000000060648201526084016103e8565b6104e08282610c12565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812054828110156106285760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016103e8565b6106353385858403610726565b5060019392505050565b600061032f3384846108a6565b3360009081526005602052604090205460ff166106d05760405162461bcd60e51b8152602060048201526024808201527f546573744552433230536574446563696d616c733a206f6e6c79207065726d6960448201527f747465640000000000000000000000000000000000000000000000000000000060648201526084016103e8565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260056020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b73ffffffffffffffffffffffffffffffffffffffff83166107ae5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103e8565b73ffffffffffffffffffffffffffffffffffffffff82166108375760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103e8565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff831661092f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103e8565b73ffffffffffffffffffffffffffffffffffffffff82166109b85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103e8565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610a545760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103e8565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610a98908490610fd9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610afe91815260200190565b60405180910390a350505050565b73ffffffffffffffffffffffffffffffffffffffff8216610b6f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103e8565b8060026000828254610b819190610fd9565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290610bbb908490610fd9565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216610c9b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016103e8565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015610d375760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016103e8565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260408120838303905560028054849290610d73908490610ff1565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610899565b600060208083528351808285015260005b81811015610df057858101830151858201604001528201610dd4565b81811115610e02576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610e5a57600080fd5b919050565b60008060408385031215610e7257600080fd5b610e7b83610e36565b946020939093013593505050565b600080600060608486031215610e9e57600080fd5b610ea784610e36565b9250610eb560208501610e36565b9150604084013590509250925092565b600060208284031215610ed757600080fd5b610ee082610e36565b9392505050565b60008060408385031215610efa57600080fd5b610f0383610e36565b915060208301358015158114610f1857600080fd5b809150509250929050565b60008060408385031215610f3657600080fd5b610f3f83610e36565b9150610f4d60208401610e36565b90509250929050565b600181811c90821680610f6a57607f821691505b60208210811415610fa4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610fec57610fec610faa565b500190565b60008282101561100357611003610faa565b50039056fea264697066735822122016adde2630254000d4567966d778988ea6719c14a5031ae4651a047d208d881364736f6c63430008090033";

type TestERC20SetDecimalsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20SetDecimalsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20SetDecimals__factory extends ContractFactory {
  constructor(...args: TestERC20SetDecimalsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC20SetDecimals> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      overrides || {}
    ) as Promise<TestERC20SetDecimals>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      overrides || {}
    );
  }
  override attach(address: string): TestERC20SetDecimals {
    return super.attach(address) as TestERC20SetDecimals;
  }
  override connect(signer: Signer): TestERC20SetDecimals__factory {
    return super.connect(signer) as TestERC20SetDecimals__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20SetDecimalsInterface {
    return new utils.Interface(_abi) as TestERC20SetDecimalsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20SetDecimals {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestERC20SetDecimals;
  }
}
