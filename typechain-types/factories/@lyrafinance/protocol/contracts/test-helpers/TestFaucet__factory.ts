/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  TestFaucet,
  TestFaucetInterface,
} from "../../../../../@lyrafinance/protocol/contracts/test-helpers/TestFaucet";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract TestERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Dripped",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "addresses",
    outputs: [
      {
        internalType: "contract TestERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "drip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "permit",
        type: "bool",
      },
    ],
    name: "permitModify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "permitted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "received",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract TestERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setDripAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000908152600260205260409020805460ff191660011790556107528061003a6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80639f678cca116100505780639f678cca146100d7578063df0cb934146100df578063edf26d9b1461010257600080fd5b806357d4b29c146100775780636cc301e31461008c57806371e72423146100c4575b600080fd5b61008a6100853660046105e6565b61013a565b005b6100af61009a366004610624565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61008a6100d2366004610648565b61020e565b61008a610387565b6100af6100ed366004610624565b60036020526000908152604090205460ff1681565b610115610110366004610674565b61058a565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100bb565b3360009081526002602052604090205460ff166101b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6f6e6c79207065726d697474656400000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b3360009081526002602052604090205460ff16610287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6f6e6c79207065726d697474656400000000000000000000000000000000000060448201526064016101af565b6000805b6001548210156102ff578373ffffffffffffffffffffffffffffffffffffffff16600183815481106102bf576102bf61068d565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156102ef575060016102ff565b6102f8826106bc565b915061028b565b80610374576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b5060009081526020819052604090205550565b3360009081526003602052604090205460ff1615610401576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f616c72656164792072656365697665640000000000000000000000000000000060448201526064016101af565b60005b60015481101561054f57600181815481106104215761042161068d565b600091825260208083209190910154838352908290526040918290205491517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481019290925273ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b505050507f0daf449977d5acafa35195e10b3eb92f97839892a6653afaba222379b58d8a9b600182815481106104f7576104f761068d565b60009182526020808320919091015484835282825260409283902054835173ffffffffffffffffffffffffffffffffffffffff9092168252918101919091520160405180910390a1610548816106bc565b9050610404565b5033600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6001818154811061059a57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff811681146105e357600080fd5b50565b600080604083850312156105f957600080fd5b8235610604816105c1565b91506020830135801515811461061957600080fd5b809150509250929050565b60006020828403121561063657600080fd5b8135610641816105c1565b9392505050565b6000806040838503121561065b57600080fd5b8235610666816105c1565b946020939093013593505050565b60006020828403121561068657600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610715577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220eb2f8fc0e2220d7fc8b0e894ea3168a65759e03410bdf4913b4984b90b68e04864736f6c63430008090033";

type TestFaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestFaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestFaucet__factory extends ContractFactory {
  constructor(...args: TestFaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestFaucet> {
    return super.deploy(overrides || {}) as Promise<TestFaucet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestFaucet {
    return super.attach(address) as TestFaucet;
  }
  override connect(signer: Signer): TestFaucet__factory {
    return super.connect(signer) as TestFaucet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFaucetInterface {
    return new utils.Interface(_abi) as TestFaucetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestFaucet {
    return new Contract(address, _abi, signerOrProvider) as TestFaucet;
  }
}
