/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface LyraAdapterInterface extends utils.Interface {
  functions: {
    "baseAsset()": FunctionFragment;
    "curveSwap()": FunctionFragment;
    "feeCounter()": FunctionFragment;
    "greekCache()": FunctionFragment;
    "gwavOracle()": FunctionFragment;
    "liquidityPool()": FunctionFragment;
    "lyraRegistry()": FunctionFragment;
    "optionMarket()": FunctionFragment;
    "optionPricer()": FunctionFragment;
    "optionToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "quoteAsset()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLyraAddresses(address,address,address,address)": FunctionFragment;
    "shortCollateral()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateDelegateApproval()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "baseAsset"
      | "curveSwap"
      | "feeCounter"
      | "greekCache"
      | "gwavOracle"
      | "liquidityPool"
      | "lyraRegistry"
      | "optionMarket"
      | "optionPricer"
      | "optionToken"
      | "owner"
      | "quoteAsset"
      | "renounceOwnership"
      | "setLyraAddresses"
      | "shortCollateral"
      | "transferOwnership"
      | "updateDelegateApproval"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "baseAsset", values?: undefined): string;
  encodeFunctionData(functionFragment: "curveSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "greekCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gwavOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lyraRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionPricer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLyraAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "shortCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelegateApproval",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "baseAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curveSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "greekCache", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gwavOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lyraRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionPricer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLyraAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelegateApproval",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LyraAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LyraAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseAsset(overrides?: CallOverrides): Promise<[string]>;

    curveSwap(overrides?: CallOverrides): Promise<[string]>;

    feeCounter(overrides?: CallOverrides): Promise<[string]>;

    greekCache(overrides?: CallOverrides): Promise<[string]>;

    gwavOracle(overrides?: CallOverrides): Promise<[string]>;

    liquidityPool(overrides?: CallOverrides): Promise<[string]>;

    lyraRegistry(overrides?: CallOverrides): Promise<[string]>;

    optionMarket(overrides?: CallOverrides): Promise<[string]>;

    optionPricer(overrides?: CallOverrides): Promise<[string]>;

    optionToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quoteAsset(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLyraAddresses(
      _lyraRegistry: PromiseOrValue<string>,
      _optionMarket: PromiseOrValue<string>,
      _curveSwap: PromiseOrValue<string>,
      _feeCounter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shortCollateral(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDelegateApproval(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  baseAsset(overrides?: CallOverrides): Promise<string>;

  curveSwap(overrides?: CallOverrides): Promise<string>;

  feeCounter(overrides?: CallOverrides): Promise<string>;

  greekCache(overrides?: CallOverrides): Promise<string>;

  gwavOracle(overrides?: CallOverrides): Promise<string>;

  liquidityPool(overrides?: CallOverrides): Promise<string>;

  lyraRegistry(overrides?: CallOverrides): Promise<string>;

  optionMarket(overrides?: CallOverrides): Promise<string>;

  optionPricer(overrides?: CallOverrides): Promise<string>;

  optionToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  quoteAsset(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLyraAddresses(
    _lyraRegistry: PromiseOrValue<string>,
    _optionMarket: PromiseOrValue<string>,
    _curveSwap: PromiseOrValue<string>,
    _feeCounter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shortCollateral(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDelegateApproval(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseAsset(overrides?: CallOverrides): Promise<string>;

    curveSwap(overrides?: CallOverrides): Promise<string>;

    feeCounter(overrides?: CallOverrides): Promise<string>;

    greekCache(overrides?: CallOverrides): Promise<string>;

    gwavOracle(overrides?: CallOverrides): Promise<string>;

    liquidityPool(overrides?: CallOverrides): Promise<string>;

    lyraRegistry(overrides?: CallOverrides): Promise<string>;

    optionMarket(overrides?: CallOverrides): Promise<string>;

    optionPricer(overrides?: CallOverrides): Promise<string>;

    optionToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    quoteAsset(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLyraAddresses(
      _lyraRegistry: PromiseOrValue<string>,
      _optionMarket: PromiseOrValue<string>,
      _curveSwap: PromiseOrValue<string>,
      _feeCounter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    shortCollateral(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDelegateApproval(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    baseAsset(overrides?: CallOverrides): Promise<BigNumber>;

    curveSwap(overrides?: CallOverrides): Promise<BigNumber>;

    feeCounter(overrides?: CallOverrides): Promise<BigNumber>;

    greekCache(overrides?: CallOverrides): Promise<BigNumber>;

    gwavOracle(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    lyraRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    optionMarket(overrides?: CallOverrides): Promise<BigNumber>;

    optionPricer(overrides?: CallOverrides): Promise<BigNumber>;

    optionToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quoteAsset(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLyraAddresses(
      _lyraRegistry: PromiseOrValue<string>,
      _optionMarket: PromiseOrValue<string>,
      _curveSwap: PromiseOrValue<string>,
      _feeCounter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shortCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDelegateApproval(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    greekCache(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gwavOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lyraRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionPricer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLyraAddresses(
      _lyraRegistry: PromiseOrValue<string>,
      _optionMarket: PromiseOrValue<string>,
      _curveSwap: PromiseOrValue<string>,
      _feeCounter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shortCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDelegateApproval(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
