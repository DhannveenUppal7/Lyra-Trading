/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace OptionMarket {
  export type TradeInputParametersStruct = {
    strikeId: PromiseOrValue<BigNumberish>;
    positionId: PromiseOrValue<BigNumberish>;
    iterations: PromiseOrValue<BigNumberish>;
    optionType: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    setCollateralTo: PromiseOrValue<BigNumberish>;
    minTotalCost: PromiseOrValue<BigNumberish>;
    maxTotalCost: PromiseOrValue<BigNumberish>;
  };

  export type TradeInputParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    strikeId: BigNumber;
    positionId: BigNumber;
    iterations: BigNumber;
    optionType: number;
    amount: BigNumber;
    setCollateralTo: BigNumber;
    minTotalCost: BigNumber;
    maxTotalCost: BigNumber;
  };

  export type ResultStruct = {
    positionId: PromiseOrValue<BigNumberish>;
    totalCost: PromiseOrValue<BigNumberish>;
    totalFee: PromiseOrValue<BigNumberish>;
  };

  export type ResultStructOutput = [BigNumber, BigNumber, BigNumber] & {
    positionId: BigNumber;
    totalCost: BigNumber;
    totalFee: BigNumber;
  };
}

export declare namespace BasicOptionMarketWrapper {
  export type OptionMarketContractsStruct = {
    quoteAsset: PromiseOrValue<string>;
    baseAsset: PromiseOrValue<string>;
    optionToken: PromiseOrValue<string>;
  };

  export type OptionMarketContractsStructOutput = [string, string, string] & {
    quoteAsset: string;
    baseAsset: string;
    optionToken: string;
  };
}

export interface BasicOptionMarketWrapperInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "closePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "forceClosePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "marketContracts(address)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "openPosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "updateMarket(address,(address,address,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "closePosition"
      | "forceClosePosition"
      | "marketContracts"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "openPosition"
      | "owner"
      | "updateMarket"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [
      PromiseOrValue<string>,
      OptionMarket.TradeInputParametersStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forceClosePosition",
    values: [
      PromiseOrValue<string>,
      OptionMarket.TradeInputParametersStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      PromiseOrValue<string>,
      OptionMarket.TradeInputParametersStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMarket",
    values: [
      PromiseOrValue<string>,
      BasicOptionMarketWrapper.OptionMarketContractsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMarket",
    data: BytesLike
  ): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
}

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<
  [string, string],
  OwnerChangedEventObject
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<
  [string],
  OwnerNominatedEventObject
>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface BasicOptionMarketWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BasicOptionMarketWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceClosePosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        quoteAsset: string;
        baseAsset: string;
        optionToken: string;
      }
    >;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    openPosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    updateMarket(
      optionMarket: PromiseOrValue<string>,
      _marketContracts: BasicOptionMarketWrapper.OptionMarketContractsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    optionMarket: PromiseOrValue<string>,
    params: OptionMarket.TradeInputParametersStruct,
    extraCollateral: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceClosePosition(
    optionMarket: PromiseOrValue<string>,
    params: OptionMarket.TradeInputParametersStruct,
    extraCollateral: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      quoteAsset: string;
      baseAsset: string;
      optionToken: string;
    }
  >;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  openPosition(
    optionMarket: PromiseOrValue<string>,
    params: OptionMarket.TradeInputParametersStruct,
    extraCollateral: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  updateMarket(
    optionMarket: PromiseOrValue<string>,
    _marketContracts: BasicOptionMarketWrapper.OptionMarketContractsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    closePosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<OptionMarket.ResultStructOutput>;

    forceClosePosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<OptionMarket.ResultStructOutput>;

    marketContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        quoteAsset: string;
        baseAsset: string;
        optionToken: string;
      }
    >;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    openPosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<OptionMarket.ResultStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    updateMarket(
      optionMarket: PromiseOrValue<string>,
      _marketContracts: BasicOptionMarketWrapper.OptionMarketContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    "OwnerNominated(address)"(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closePosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceClosePosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    updateMarket(
      optionMarket: PromiseOrValue<string>,
      _marketContracts: BasicOptionMarketWrapper.OptionMarketContractsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceClosePosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPosition(
      optionMarket: PromiseOrValue<string>,
      params: OptionMarket.TradeInputParametersStruct,
      extraCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMarket(
      optionMarket: PromiseOrValue<string>,
      _marketContracts: BasicOptionMarketWrapper.OptionMarketContractsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
