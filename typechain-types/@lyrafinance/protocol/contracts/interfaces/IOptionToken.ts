/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IOptionToken {
  export type PartialCollateralParametersStruct = {
    penaltyRatio: PromiseOrValue<BigNumberish>;
    liquidatorFeeRatio: PromiseOrValue<BigNumberish>;
    smFeeRatio: PromiseOrValue<BigNumberish>;
    minLiquidationFee: PromiseOrValue<BigNumberish>;
  };

  export type PartialCollateralParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    penaltyRatio: BigNumber;
    liquidatorFeeRatio: BigNumber;
    smFeeRatio: BigNumber;
    minLiquidationFee: BigNumber;
  };

  export type OptionPositionStruct = {
    positionId: PromiseOrValue<BigNumberish>;
    strikeId: PromiseOrValue<BigNumberish>;
    optionType: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
  };

  export type OptionPositionStructOutput = [
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number
  ] & {
    positionId: BigNumber;
    strikeId: BigNumber;
    optionType: number;
    amount: BigNumber;
    collateral: BigNumber;
    state: number;
  };

  export type LiquidationFeesStruct = {
    returnCollateral: PromiseOrValue<BigNumberish>;
    lpPremiums: PromiseOrValue<BigNumberish>;
    lpFee: PromiseOrValue<BigNumberish>;
    liquidatorFee: PromiseOrValue<BigNumberish>;
    smFee: PromiseOrValue<BigNumberish>;
    insolventAmount: PromiseOrValue<BigNumberish>;
  };

  export type LiquidationFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    returnCollateral: BigNumber;
    lpPremiums: BigNumber;
    lpFee: BigNumber;
    liquidatorFee: BigNumber;
    smFee: BigNumber;
    insolventAmount: BigNumber;
  };

  export type PositionWithOwnerStruct = {
    positionId: PromiseOrValue<BigNumberish>;
    strikeId: PromiseOrValue<BigNumberish>;
    optionType: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
  };

  export type PositionWithOwnerStructOutput = [
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number,
    string
  ] & {
    positionId: BigNumber;
    strikeId: BigNumber;
    optionType: number;
    amount: BigNumber;
    collateral: BigNumber;
    state: number;
    owner: string;
  };
}

export interface IOptionTokenInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "canLiquidate((uint256,uint256,uint8,uint256,uint256,uint8),uint256,uint256,uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getLiquidationFees(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getOptionPosition(uint256)": FunctionFragment;
    "getOptionPositions(uint256[])": FunctionFragment;
    "getOwnerPositions(address)": FunctionFragment;
    "getPartialCollatParams()": FunctionFragment;
    "getPositionState(uint256)": FunctionFragment;
    "getPositionWithOwner(uint256)": FunctionFragment;
    "getPositionsWithOwner(uint256[])": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "merge(uint256[])": FunctionFragment;
    "nextId()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "partialCollatParams()": FunctionFragment;
    "positions(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "split(uint256,uint256,uint256,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "baseURI"
      | "canLiquidate"
      | "getApproved"
      | "getLiquidationFees"
      | "getOptionPosition"
      | "getOptionPositions"
      | "getOwnerPositions"
      | "getPartialCollatParams"
      | "getPositionState"
      | "getPositionWithOwner"
      | "getPositionsWithOwner"
      | "isApprovedForAll"
      | "merge"
      | "nextId"
      | "ownerOf"
      | "partialCollatParams"
      | "positions"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "split"
      | "supportsInterface"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canLiquidate",
    values: [
      IOptionToken.OptionPositionStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionPosition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionPositions",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerPositions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartialCollatParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionWithOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsWithOwner",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "merge",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "partialCollatParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPartialCollatParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionWithOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsWithOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialCollatParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "PartialCollateralParamsSet(tuple)": EventFragment;
    "PositionUpdated(uint256,address,uint8,tuple,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "URISet(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialCollateralParamsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URISet"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface PartialCollateralParamsSetEventObject {
  partialCollateralParams: IOptionToken.PartialCollateralParametersStructOutput;
}
export type PartialCollateralParamsSetEvent = TypedEvent<
  [IOptionToken.PartialCollateralParametersStructOutput],
  PartialCollateralParamsSetEventObject
>;

export type PartialCollateralParamsSetEventFilter =
  TypedEventFilter<PartialCollateralParamsSetEvent>;

export interface PositionUpdatedEventObject {
  positionId: BigNumber;
  owner: string;
  updatedType: number;
  position: IOptionToken.OptionPositionStructOutput;
  timestamp: BigNumber;
}
export type PositionUpdatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    number,
    IOptionToken.OptionPositionStructOutput,
    BigNumber
  ],
  PositionUpdatedEventObject
>;

export type PositionUpdatedEventFilter = TypedEventFilter<PositionUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface URISetEventObject {
  URI: string;
}
export type URISetEvent = TypedEvent<[string], URISetEventObject>;

export type URISetEventFilter = TypedEventFilter<URISetEvent>;

export interface IOptionToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOptionTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    canLiquidate(
      position: IOptionToken.OptionPositionStruct,
      expiry: PromiseOrValue<BigNumberish>,
      strikePrice: PromiseOrValue<BigNumberish>,
      spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { operator: string }>;

    getLiquidationFees(
      gwavPremium: PromiseOrValue<BigNumberish>,
      userPositionCollateral: PromiseOrValue<BigNumberish>,
      convertedMinLiquidationFee: PromiseOrValue<BigNumberish>,
      insolvencyMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IOptionToken.LiquidationFeesStructOutput] & {
        liquidationFees: IOptionToken.LiquidationFeesStructOutput;
      }
    >;

    getOptionPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IOptionToken.OptionPositionStructOutput]>;

    getOptionPositions(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[IOptionToken.OptionPositionStructOutput[]]>;

    getOwnerPositions(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IOptionToken.OptionPositionStructOutput[]]>;

    getPartialCollatParams(
      overrides?: CallOverrides
    ): Promise<[IOptionToken.PartialCollateralParametersStructOutput]>;

    getPositionState(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPositionWithOwner(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IOptionToken.PositionWithOwnerStructOutput]>;

    getPositionsWithOwner(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[IOptionToken.PositionWithOwnerStructOutput[]]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merge(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextId(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    partialCollatParams(
      overrides?: CallOverrides
    ): Promise<[IOptionToken.PartialCollateralParametersStructOutput]>;

    positions(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IOptionToken.OptionPositionStructOutput]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    split(
      positionId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newCollateral: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  canLiquidate(
    position: IOptionToken.OptionPositionStruct,
    expiry: PromiseOrValue<BigNumberish>,
    strikePrice: PromiseOrValue<BigNumberish>,
    spotPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLiquidationFees(
    gwavPremium: PromiseOrValue<BigNumberish>,
    userPositionCollateral: PromiseOrValue<BigNumberish>,
    convertedMinLiquidationFee: PromiseOrValue<BigNumberish>,
    insolvencyMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IOptionToken.LiquidationFeesStructOutput>;

  getOptionPosition(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IOptionToken.OptionPositionStructOutput>;

  getOptionPositions(
    positionIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IOptionToken.OptionPositionStructOutput[]>;

  getOwnerPositions(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IOptionToken.OptionPositionStructOutput[]>;

  getPartialCollatParams(
    overrides?: CallOverrides
  ): Promise<IOptionToken.PartialCollateralParametersStructOutput>;

  getPositionState(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPositionWithOwner(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IOptionToken.PositionWithOwnerStructOutput>;

  getPositionsWithOwner(
    positionIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IOptionToken.PositionWithOwnerStructOutput[]>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merge(
    positionIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextId(overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  partialCollatParams(
    overrides?: CallOverrides
  ): Promise<IOptionToken.PartialCollateralParametersStructOutput>;

  positions(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IOptionToken.OptionPositionStructOutput>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  split(
    positionId: PromiseOrValue<BigNumberish>,
    newAmount: PromiseOrValue<BigNumberish>,
    newCollateral: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    canLiquidate(
      position: IOptionToken.OptionPositionStruct,
      expiry: PromiseOrValue<BigNumberish>,
      strikePrice: PromiseOrValue<BigNumberish>,
      spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLiquidationFees(
      gwavPremium: PromiseOrValue<BigNumberish>,
      userPositionCollateral: PromiseOrValue<BigNumberish>,
      convertedMinLiquidationFee: PromiseOrValue<BigNumberish>,
      insolvencyMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IOptionToken.LiquidationFeesStructOutput>;

    getOptionPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IOptionToken.OptionPositionStructOutput>;

    getOptionPositions(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IOptionToken.OptionPositionStructOutput[]>;

    getOwnerPositions(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IOptionToken.OptionPositionStructOutput[]>;

    getPartialCollatParams(
      overrides?: CallOverrides
    ): Promise<IOptionToken.PartialCollateralParametersStructOutput>;

    getPositionState(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPositionWithOwner(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IOptionToken.PositionWithOwnerStructOutput>;

    getPositionsWithOwner(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IOptionToken.PositionWithOwnerStructOutput[]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merge(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    partialCollatParams(
      overrides?: CallOverrides
    ): Promise<IOptionToken.PartialCollateralParametersStructOutput>;

    positions(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IOptionToken.OptionPositionStructOutput>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    split(
      positionId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newCollateral: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "PartialCollateralParamsSet(tuple)"(
      partialCollateralParams?: null
    ): PartialCollateralParamsSetEventFilter;
    PartialCollateralParamsSet(
      partialCollateralParams?: null
    ): PartialCollateralParamsSetEventFilter;

    "PositionUpdated(uint256,address,uint8,tuple,uint256)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      updatedType?: PromiseOrValue<BigNumberish> | null,
      position?: null,
      timestamp?: null
    ): PositionUpdatedEventFilter;
    PositionUpdated(
      positionId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      updatedType?: PromiseOrValue<BigNumberish> | null,
      position?: null,
      timestamp?: null
    ): PositionUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "URISet(string)"(URI?: null): URISetEventFilter;
    URISet(URI?: null): URISetEventFilter;
  };

  estimateGas: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    canLiquidate(
      position: IOptionToken.OptionPositionStruct,
      expiry: PromiseOrValue<BigNumberish>,
      strikePrice: PromiseOrValue<BigNumberish>,
      spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationFees(
      gwavPremium: PromiseOrValue<BigNumberish>,
      userPositionCollateral: PromiseOrValue<BigNumberish>,
      convertedMinLiquidationFee: PromiseOrValue<BigNumberish>,
      insolvencyMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionPositions(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerPositions(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartialCollatParams(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionState(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionWithOwner(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionsWithOwner(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merge(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partialCollatParams(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    split(
      positionId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newCollateral: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canLiquidate(
      position: IOptionToken.OptionPositionStruct,
      expiry: PromiseOrValue<BigNumberish>,
      strikePrice: PromiseOrValue<BigNumberish>,
      spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationFees(
      gwavPremium: PromiseOrValue<BigNumberish>,
      userPositionCollateral: PromiseOrValue<BigNumberish>,
      convertedMinLiquidationFee: PromiseOrValue<BigNumberish>,
      insolvencyMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionPositions(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerPositions(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPartialCollatParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionState(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionWithOwner(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionsWithOwner(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merge(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partialCollatParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    split(
      positionId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newCollateral: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
