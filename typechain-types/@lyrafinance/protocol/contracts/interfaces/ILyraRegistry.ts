/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace ILyraRegistry {
  export type OptionMarketAddressesStruct = {
    liquidityPool: PromiseOrValue<string>;
    liquidityToken: PromiseOrValue<string>;
    greekCache: PromiseOrValue<string>;
    optionMarket: PromiseOrValue<string>;
    optionMarketPricer: PromiseOrValue<string>;
    optionToken: PromiseOrValue<string>;
    poolHedger: PromiseOrValue<string>;
    shortCollateral: PromiseOrValue<string>;
    gwavOracle: PromiseOrValue<string>;
    quoteAsset: PromiseOrValue<string>;
    baseAsset: PromiseOrValue<string>;
  };

  export type OptionMarketAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    liquidityPool: string;
    liquidityToken: string;
    greekCache: string;
    optionMarket: string;
    optionMarketPricer: string;
    optionToken: string;
    poolHedger: string;
    shortCollateral: string;
    gwavOracle: string;
    quoteAsset: string;
    baseAsset: string;
  };
}

export interface ILyraRegistryInterface extends utils.Interface {
  functions: {
    "getGlobalAddress(bytes32)": FunctionFragment;
    "getMarketAddresses(address)": FunctionFragment;
    "globalAddresses(bytes32)": FunctionFragment;
    "marketAddress(address)": FunctionFragment;
    "optionMarkets()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getGlobalAddress"
      | "getMarketAddresses"
      | "globalAddresses"
      | "marketAddress"
      | "optionMarkets"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getGlobalAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalAddresses",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "optionMarkets",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getGlobalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionMarkets",
    data: BytesLike
  ): Result;

  events: {
    "GlobalAddressUpdated(bytes32,address)": EventFragment;
    "MarketRemoved(address)": EventFragment;
    "MarketUpdated(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GlobalAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUpdated"): EventFragment;
}

export interface GlobalAddressUpdatedEventObject {
  name: string;
  addr: string;
}
export type GlobalAddressUpdatedEvent = TypedEvent<
  [string, string],
  GlobalAddressUpdatedEventObject
>;

export type GlobalAddressUpdatedEventFilter =
  TypedEventFilter<GlobalAddressUpdatedEvent>;

export interface MarketRemovedEventObject {
  market: string;
}
export type MarketRemovedEvent = TypedEvent<[string], MarketRemovedEventObject>;

export type MarketRemovedEventFilter = TypedEventFilter<MarketRemovedEvent>;

export interface MarketUpdatedEventObject {
  optionMarket: string;
  market: ILyraRegistry.OptionMarketAddressesStructOutput;
}
export type MarketUpdatedEvent = TypedEvent<
  [string, ILyraRegistry.OptionMarketAddressesStructOutput],
  MarketUpdatedEventObject
>;

export type MarketUpdatedEventFilter = TypedEventFilter<MarketUpdatedEvent>;

export interface ILyraRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILyraRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getGlobalAddress(
      contractName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { globalContract: string }>;

    getMarketAddresses(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ILyraRegistry.OptionMarketAddressesStructOutput]>;

    globalAddresses(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    marketAddress(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ILyraRegistry.OptionMarketAddressesStructOutput]>;

    optionMarkets(overrides?: CallOverrides): Promise<[string[]]>;
  };

  getGlobalAddress(
    contractName: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketAddresses(
    optionMarket: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ILyraRegistry.OptionMarketAddressesStructOutput>;

  globalAddresses(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  marketAddress(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ILyraRegistry.OptionMarketAddressesStructOutput>;

  optionMarkets(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    getGlobalAddress(
      contractName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketAddresses(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ILyraRegistry.OptionMarketAddressesStructOutput>;

    globalAddresses(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    marketAddress(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ILyraRegistry.OptionMarketAddressesStructOutput>;

    optionMarkets(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "GlobalAddressUpdated(bytes32,address)"(
      name?: PromiseOrValue<BytesLike> | null,
      addr?: null
    ): GlobalAddressUpdatedEventFilter;
    GlobalAddressUpdated(
      name?: PromiseOrValue<BytesLike> | null,
      addr?: null
    ): GlobalAddressUpdatedEventFilter;

    "MarketRemoved(address)"(
      market?: PromiseOrValue<string> | null
    ): MarketRemovedEventFilter;
    MarketRemoved(
      market?: PromiseOrValue<string> | null
    ): MarketRemovedEventFilter;

    "MarketUpdated(address,tuple)"(
      optionMarket?: PromiseOrValue<string> | null,
      market?: null
    ): MarketUpdatedEventFilter;
    MarketUpdated(
      optionMarket?: PromiseOrValue<string> | null,
      market?: null
    ): MarketUpdatedEventFilter;
  };

  estimateGas: {
    getGlobalAddress(
      contractName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketAddresses(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalAddresses(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketAddress(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionMarkets(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getGlobalAddress(
      contractName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketAddresses(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalAddresses(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketAddress(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
