/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace ILiquidityPool {
  export type LiquidityPoolParametersStruct = {
    minDepositWithdraw: PromiseOrValue<BigNumberish>;
    depositDelay: PromiseOrValue<BigNumberish>;
    withdrawalDelay: PromiseOrValue<BigNumberish>;
    withdrawalFee: PromiseOrValue<BigNumberish>;
    liquidityCBThreshold: PromiseOrValue<BigNumberish>;
    liquidityCBTimeout: PromiseOrValue<BigNumberish>;
    ivVarianceCBThreshold: PromiseOrValue<BigNumberish>;
    skewVarianceCBThreshold: PromiseOrValue<BigNumberish>;
    ivVarianceCBTimeout: PromiseOrValue<BigNumberish>;
    skewVarianceCBTimeout: PromiseOrValue<BigNumberish>;
    guardianMultisig: PromiseOrValue<string>;
    guardianDelay: PromiseOrValue<BigNumberish>;
    boardSettlementCBTimeout: PromiseOrValue<BigNumberish>;
    maxFeePaid: PromiseOrValue<BigNumberish>;
  };

  export type LiquidityPoolParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    minDepositWithdraw: BigNumber;
    depositDelay: BigNumber;
    withdrawalDelay: BigNumber;
    withdrawalFee: BigNumber;
    liquidityCBThreshold: BigNumber;
    liquidityCBTimeout: BigNumber;
    ivVarianceCBThreshold: BigNumber;
    skewVarianceCBThreshold: BigNumber;
    ivVarianceCBTimeout: BigNumber;
    skewVarianceCBTimeout: BigNumber;
    guardianMultisig: string;
    guardianDelay: BigNumber;
    boardSettlementCBTimeout: BigNumber;
    maxFeePaid: BigNumber;
  };

  export type LiquidityStruct = {
    freeLiquidity: PromiseOrValue<BigNumberish>;
    burnableLiquidity: PromiseOrValue<BigNumberish>;
    usedCollatLiquidity: PromiseOrValue<BigNumberish>;
    pendingDeltaLiquidity: PromiseOrValue<BigNumberish>;
    usedDeltaLiquidity: PromiseOrValue<BigNumberish>;
    NAV: PromiseOrValue<BigNumberish>;
  };

  export type LiquidityStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    freeLiquidity: BigNumber;
    burnableLiquidity: BigNumber;
    usedCollatLiquidity: BigNumber;
    pendingDeltaLiquidity: BigNumber;
    usedDeltaLiquidity: BigNumber;
    NAV: BigNumber;
  };

  export type CollateralStruct = {
    quote: PromiseOrValue<BigNumberish>;
    base: PromiseOrValue<BigNumberish>;
  };

  export type CollateralStructOutput = [BigNumber, BigNumber] & {
    quote: BigNumber;
    base: BigNumber;
  };

  export type QueuedDepositStruct = {
    id: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<string>;
    amountLiquidity: PromiseOrValue<BigNumberish>;
    mintedTokens: PromiseOrValue<BigNumberish>;
    depositInitiatedTime: PromiseOrValue<BigNumberish>;
  };

  export type QueuedDepositStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    beneficiary: string;
    amountLiquidity: BigNumber;
    mintedTokens: BigNumber;
    depositInitiatedTime: BigNumber;
  };

  export type QueuedWithdrawalStruct = {
    id: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<string>;
    amountTokens: PromiseOrValue<BigNumberish>;
    quoteSent: PromiseOrValue<BigNumberish>;
    withdrawInitiatedTime: PromiseOrValue<BigNumberish>;
  };

  export type QueuedWithdrawalStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    beneficiary: string;
    amountTokens: BigNumber;
    quoteSent: BigNumber;
    withdrawInitiatedTime: BigNumber;
  };
}

export interface ILiquidityPoolInterface extends utils.Interface {
  functions: {
    "CBTimestamp()": FunctionFragment;
    "exchangeBase()": FunctionFragment;
    "getCurrentLiquidity()": FunctionFragment;
    "getLiquidity(uint256)": FunctionFragment;
    "getLpParams()": FunctionFragment;
    "getTokenPrice()": FunctionFragment;
    "getTokenPriceWithCheck()": FunctionFragment;
    "getTotalPoolValueQuote()": FunctionFragment;
    "getTotalTokenSupply()": FunctionFragment;
    "initiateDeposit(address,uint256)": FunctionFragment;
    "initiateWithdraw(address,uint256)": FunctionFragment;
    "insolventSettlementAmount()": FunctionFragment;
    "liquidationInsolventAmount()": FunctionFragment;
    "lockedCollateral()": FunctionFragment;
    "nextQueuedDepositId()": FunctionFragment;
    "nextQueuedWithdrawalId()": FunctionFragment;
    "poolHedger()": FunctionFragment;
    "processDepositQueue(uint256)": FunctionFragment;
    "processWithdrawalQueue(uint256)": FunctionFragment;
    "queuedDepositHead()": FunctionFragment;
    "queuedDeposits(uint256)": FunctionFragment;
    "queuedWithdrawalHead()": FunctionFragment;
    "queuedWithdrawals(uint256)": FunctionFragment;
    "totalOutstandingSettlements()": FunctionFragment;
    "totalQueuedDeposits()": FunctionFragment;
    "totalQueuedWithdrawals()": FunctionFragment;
    "updateCBs()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CBTimestamp"
      | "exchangeBase"
      | "getCurrentLiquidity"
      | "getLiquidity"
      | "getLpParams"
      | "getTokenPrice"
      | "getTokenPriceWithCheck"
      | "getTotalPoolValueQuote"
      | "getTotalTokenSupply"
      | "initiateDeposit"
      | "initiateWithdraw"
      | "insolventSettlementAmount"
      | "liquidationInsolventAmount"
      | "lockedCollateral"
      | "nextQueuedDepositId"
      | "nextQueuedWithdrawalId"
      | "poolHedger"
      | "processDepositQueue"
      | "processWithdrawalQueue"
      | "queuedDepositHead"
      | "queuedDeposits"
      | "queuedWithdrawalHead"
      | "queuedWithdrawals"
      | "totalOutstandingSettlements"
      | "totalQueuedDeposits"
      | "totalQueuedWithdrawals"
      | "updateCBs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CBTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceWithCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPoolValueQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateDeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "insolventSettlementAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationInsolventAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextQueuedDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextQueuedWithdrawalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolHedger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processDepositQueue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawalQueue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedDepositHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedDeposits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedWithdrawalHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedWithdrawals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalOutstandingSettlements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "updateCBs", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CBTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceWithCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPoolValueQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insolventSettlementAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationInsolventAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextQueuedDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextQueuedWithdrawalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolHedger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDepositQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedDepositHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedWithdrawalHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOutstandingSettlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCBs", data: BytesLike): Result;

  events: {
    "BaseFreed(uint256,uint256)": EventFragment;
    "BaseLocked(uint256,uint256)": EventFragment;
    "BasePurchased(uint256,uint256)": EventFragment;
    "BaseSold(uint256,uint256)": EventFragment;
    "BoardSettlement(uint256,uint256,uint256)": EventFragment;
    "BoardSettlementCircuitBreakerUpdated(uint256)": EventFragment;
    "CheckingCanProcess(uint256,bool,bool,bool,bool)": EventFragment;
    "CircuitBreakerUpdated(uint256,bool,bool,bool)": EventFragment;
    "DepositProcessed(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DepositQueued(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "InsolventSettlementAmountUpdated(uint256,uint256)": EventFragment;
    "LiquidityPoolParametersUpdated(tuple)": EventFragment;
    "OutstandingSettlementSent(address,uint256,uint256)": EventFragment;
    "PoolHedgerUpdated(address)": EventFragment;
    "PremiumTransferred(address,uint256,uint256)": EventFragment;
    "QuoteFreed(uint256,uint256)": EventFragment;
    "QuoteLocked(uint256,uint256)": EventFragment;
    "QuoteTransferredToPoolHedger(uint256)": EventFragment;
    "WithdrawPartiallyProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawQueued(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseFreed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasePurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoardSettlement"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BoardSettlementCircuitBreakerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CheckingCanProcess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CircuitBreakerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositQueued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InsolventSettlementAmountUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPoolParametersUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutstandingSettlementSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolHedgerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteFreed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "QuoteTransferredToPoolHedger"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawPartiallyProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawQueued"): EventFragment;
}

export interface BaseFreedEventObject {
  baseFreed: BigNumber;
  lockedCollateralBase: BigNumber;
}
export type BaseFreedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BaseFreedEventObject
>;

export type BaseFreedEventFilter = TypedEventFilter<BaseFreedEvent>;

export interface BaseLockedEventObject {
  baseLocked: BigNumber;
  lockedCollateralBase: BigNumber;
}
export type BaseLockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BaseLockedEventObject
>;

export type BaseLockedEventFilter = TypedEventFilter<BaseLockedEvent>;

export interface BasePurchasedEventObject {
  quoteSpent: BigNumber;
  baseReceived: BigNumber;
}
export type BasePurchasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BasePurchasedEventObject
>;

export type BasePurchasedEventFilter = TypedEventFilter<BasePurchasedEvent>;

export interface BaseSoldEventObject {
  amountBase: BigNumber;
  quoteReceived: BigNumber;
}
export type BaseSoldEvent = TypedEvent<
  [BigNumber, BigNumber],
  BaseSoldEventObject
>;

export type BaseSoldEventFilter = TypedEventFilter<BaseSoldEvent>;

export interface BoardSettlementEventObject {
  insolventSettlementAmount: BigNumber;
  amountQuoteReserved: BigNumber;
  totalOutstandingSettlements: BigNumber;
}
export type BoardSettlementEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  BoardSettlementEventObject
>;

export type BoardSettlementEventFilter = TypedEventFilter<BoardSettlementEvent>;

export interface BoardSettlementCircuitBreakerUpdatedEventObject {
  newTimestamp: BigNumber;
}
export type BoardSettlementCircuitBreakerUpdatedEvent = TypedEvent<
  [BigNumber],
  BoardSettlementCircuitBreakerUpdatedEventObject
>;

export type BoardSettlementCircuitBreakerUpdatedEventFilter =
  TypedEventFilter<BoardSettlementCircuitBreakerUpdatedEvent>;

export interface CheckingCanProcessEventObject {
  entryId: BigNumber;
  boardNotStale: boolean;
  validEntry: boolean;
  guardianBypass: boolean;
  delaysExpired: boolean;
}
export type CheckingCanProcessEvent = TypedEvent<
  [BigNumber, boolean, boolean, boolean, boolean],
  CheckingCanProcessEventObject
>;

export type CheckingCanProcessEventFilter =
  TypedEventFilter<CheckingCanProcessEvent>;

export interface CircuitBreakerUpdatedEventObject {
  newTimestamp: BigNumber;
  ivVarianceThresholdCrossed: boolean;
  skewVarianceThresholdCrossed: boolean;
  liquidityThresholdCrossed: boolean;
}
export type CircuitBreakerUpdatedEvent = TypedEvent<
  [BigNumber, boolean, boolean, boolean],
  CircuitBreakerUpdatedEventObject
>;

export type CircuitBreakerUpdatedEventFilter =
  TypedEventFilter<CircuitBreakerUpdatedEvent>;

export interface DepositProcessedEventObject {
  caller: string;
  beneficiary: string;
  depositQueueId: BigNumber;
  amountDeposited: BigNumber;
  tokenPrice: BigNumber;
  tokensReceived: BigNumber;
  timestamp: BigNumber;
}
export type DepositProcessedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositProcessedEventObject
>;

export type DepositProcessedEventFilter =
  TypedEventFilter<DepositProcessedEvent>;

export interface DepositQueuedEventObject {
  depositor: string;
  beneficiary: string;
  depositQueueId: BigNumber;
  amountDeposited: BigNumber;
  totalQueuedDeposits: BigNumber;
  timestamp: BigNumber;
}
export type DepositQueuedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositQueuedEventObject
>;

export type DepositQueuedEventFilter = TypedEventFilter<DepositQueuedEvent>;

export interface InsolventSettlementAmountUpdatedEventObject {
  amountQuoteAdded: BigNumber;
  totalInsolventSettlementAmount: BigNumber;
}
export type InsolventSettlementAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  InsolventSettlementAmountUpdatedEventObject
>;

export type InsolventSettlementAmountUpdatedEventFilter =
  TypedEventFilter<InsolventSettlementAmountUpdatedEvent>;

export interface LiquidityPoolParametersUpdatedEventObject {
  lpParams: ILiquidityPool.LiquidityPoolParametersStructOutput;
}
export type LiquidityPoolParametersUpdatedEvent = TypedEvent<
  [ILiquidityPool.LiquidityPoolParametersStructOutput],
  LiquidityPoolParametersUpdatedEventObject
>;

export type LiquidityPoolParametersUpdatedEventFilter =
  TypedEventFilter<LiquidityPoolParametersUpdatedEvent>;

export interface OutstandingSettlementSentEventObject {
  user: string;
  amount: BigNumber;
  totalOutstandingSettlements: BigNumber;
}
export type OutstandingSettlementSentEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OutstandingSettlementSentEventObject
>;

export type OutstandingSettlementSentEventFilter =
  TypedEventFilter<OutstandingSettlementSentEvent>;

export interface PoolHedgerUpdatedEventObject {
  poolHedger: string;
}
export type PoolHedgerUpdatedEvent = TypedEvent<
  [string],
  PoolHedgerUpdatedEventObject
>;

export type PoolHedgerUpdatedEventFilter =
  TypedEventFilter<PoolHedgerUpdatedEvent>;

export interface PremiumTransferredEventObject {
  recipient: string;
  recipientPortion: BigNumber;
  optionMarketPortion: BigNumber;
}
export type PremiumTransferredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PremiumTransferredEventObject
>;

export type PremiumTransferredEventFilter =
  TypedEventFilter<PremiumTransferredEvent>;

export interface QuoteFreedEventObject {
  quoteFreed: BigNumber;
  lockedCollateralQuote: BigNumber;
}
export type QuoteFreedEvent = TypedEvent<
  [BigNumber, BigNumber],
  QuoteFreedEventObject
>;

export type QuoteFreedEventFilter = TypedEventFilter<QuoteFreedEvent>;

export interface QuoteLockedEventObject {
  quoteLocked: BigNumber;
  lockedCollateralQuote: BigNumber;
}
export type QuoteLockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  QuoteLockedEventObject
>;

export type QuoteLockedEventFilter = TypedEventFilter<QuoteLockedEvent>;

export interface QuoteTransferredToPoolHedgerEventObject {
  amountQuote: BigNumber;
}
export type QuoteTransferredToPoolHedgerEvent = TypedEvent<
  [BigNumber],
  QuoteTransferredToPoolHedgerEventObject
>;

export type QuoteTransferredToPoolHedgerEventFilter =
  TypedEventFilter<QuoteTransferredToPoolHedgerEvent>;

export interface WithdrawPartiallyProcessedEventObject {
  caller: string;
  beneficiary: string;
  withdrawalQueueId: BigNumber;
  amountWithdrawn: BigNumber;
  tokenPrice: BigNumber;
  quoteReceived: BigNumber;
  totalQueuedWithdrawals: BigNumber;
  timestamp: BigNumber;
}
export type WithdrawPartiallyProcessedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  WithdrawPartiallyProcessedEventObject
>;

export type WithdrawPartiallyProcessedEventFilter =
  TypedEventFilter<WithdrawPartiallyProcessedEvent>;

export interface WithdrawProcessedEventObject {
  caller: string;
  beneficiary: string;
  withdrawalQueueId: BigNumber;
  amountWithdrawn: BigNumber;
  tokenPrice: BigNumber;
  quoteReceived: BigNumber;
  totalQueuedWithdrawals: BigNumber;
  timestamp: BigNumber;
}
export type WithdrawProcessedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  WithdrawProcessedEventObject
>;

export type WithdrawProcessedEventFilter =
  TypedEventFilter<WithdrawProcessedEvent>;

export interface WithdrawQueuedEventObject {
  withdrawer: string;
  beneficiary: string;
  withdrawalQueueId: BigNumber;
  amountWithdrawn: BigNumber;
  totalQueuedWithdrawals: BigNumber;
  timestamp: BigNumber;
}
export type WithdrawQueuedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  WithdrawQueuedEventObject
>;

export type WithdrawQueuedEventFilter = TypedEventFilter<WithdrawQueuedEvent>;

export interface ILiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CBTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeBase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentLiquidity(
      overrides?: CallOverrides
    ): Promise<[ILiquidityPool.LiquidityStructOutput]>;

    getLiquidity(
      spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILiquidityPool.LiquidityStructOutput]>;

    getLpParams(
      overrides?: CallOverrides
    ): Promise<[ILiquidityPool.LiquidityPoolParametersStructOutput]>;

    getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenPriceWithCheck(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        tokenPrice: BigNumber;
        isStale: boolean;
        circuitBreakerExpiry: BigNumber;
      }
    >;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    initiateDeposit(
      beneficiary: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateWithdraw(
      beneficiary: PromiseOrValue<string>,
      amountLiquidityToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedCollateral(
      overrides?: CallOverrides
    ): Promise<[ILiquidityPool.CollateralStructOutput]>;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolHedger(overrides?: CallOverrides): Promise<[string]>;

    processDepositQueue(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processWithdrawalQueue(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queuedDepositHead(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedDeposits(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILiquidityPool.QueuedDepositStructOutput]>;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedWithdrawals(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILiquidityPool.QueuedWithdrawalStructOutput]>;

    totalOutstandingSettlements(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCBs(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeBase(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentLiquidity(
    overrides?: CallOverrides
  ): Promise<ILiquidityPool.LiquidityStructOutput>;

  getLiquidity(
    spotPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidityPool.LiquidityStructOutput>;

  getLpParams(
    overrides?: CallOverrides
  ): Promise<ILiquidityPool.LiquidityPoolParametersStructOutput>;

  getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenPriceWithCheck(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      tokenPrice: BigNumber;
      isStale: boolean;
      circuitBreakerExpiry: BigNumber;
    }
  >;

  getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  initiateDeposit(
    beneficiary: PromiseOrValue<string>,
    amountQuote: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateWithdraw(
    beneficiary: PromiseOrValue<string>,
    amountLiquidityToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

  lockedCollateral(
    overrides?: CallOverrides
  ): Promise<ILiquidityPool.CollateralStructOutput>;

  nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

  nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

  poolHedger(overrides?: CallOverrides): Promise<string>;

  processDepositQueue(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processWithdrawalQueue(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

  queuedDeposits(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidityPool.QueuedDepositStructOutput>;

  queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

  queuedWithdrawals(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidityPool.QueuedWithdrawalStructOutput>;

  totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

  totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

  updateCBs(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeBase(overrides?: CallOverrides): Promise<void>;

    getCurrentLiquidity(
      overrides?: CallOverrides
    ): Promise<ILiquidityPool.LiquidityStructOutput>;

    getLiquidity(
      spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidityPool.LiquidityStructOutput>;

    getLpParams(
      overrides?: CallOverrides
    ): Promise<ILiquidityPool.LiquidityPoolParametersStructOutput>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceWithCheck(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        tokenPrice: BigNumber;
        isStale: boolean;
        circuitBreakerExpiry: BigNumber;
      }
    >;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    initiateDeposit(
      beneficiary: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateWithdraw(
      beneficiary: PromiseOrValue<string>,
      amountLiquidityToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lockedCollateral(
      overrides?: CallOverrides
    ): Promise<ILiquidityPool.CollateralStructOutput>;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

    poolHedger(overrides?: CallOverrides): Promise<string>;

    processDepositQueue(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    processWithdrawalQueue(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDeposits(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidityPool.QueuedDepositStructOutput>;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedWithdrawals(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidityPool.QueuedWithdrawalStructOutput>;

    totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    updateCBs(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BaseFreed(uint256,uint256)"(
      baseFreed?: null,
      lockedCollateralBase?: null
    ): BaseFreedEventFilter;
    BaseFreed(
      baseFreed?: null,
      lockedCollateralBase?: null
    ): BaseFreedEventFilter;

    "BaseLocked(uint256,uint256)"(
      baseLocked?: null,
      lockedCollateralBase?: null
    ): BaseLockedEventFilter;
    BaseLocked(
      baseLocked?: null,
      lockedCollateralBase?: null
    ): BaseLockedEventFilter;

    "BasePurchased(uint256,uint256)"(
      quoteSpent?: null,
      baseReceived?: null
    ): BasePurchasedEventFilter;
    BasePurchased(
      quoteSpent?: null,
      baseReceived?: null
    ): BasePurchasedEventFilter;

    "BaseSold(uint256,uint256)"(
      amountBase?: null,
      quoteReceived?: null
    ): BaseSoldEventFilter;
    BaseSold(amountBase?: null, quoteReceived?: null): BaseSoldEventFilter;

    "BoardSettlement(uint256,uint256,uint256)"(
      insolventSettlementAmount?: null,
      amountQuoteReserved?: null,
      totalOutstandingSettlements?: null
    ): BoardSettlementEventFilter;
    BoardSettlement(
      insolventSettlementAmount?: null,
      amountQuoteReserved?: null,
      totalOutstandingSettlements?: null
    ): BoardSettlementEventFilter;

    "BoardSettlementCircuitBreakerUpdated(uint256)"(
      newTimestamp?: null
    ): BoardSettlementCircuitBreakerUpdatedEventFilter;
    BoardSettlementCircuitBreakerUpdated(
      newTimestamp?: null
    ): BoardSettlementCircuitBreakerUpdatedEventFilter;

    "CheckingCanProcess(uint256,bool,bool,bool,bool)"(
      entryId?: null,
      boardNotStale?: null,
      validEntry?: null,
      guardianBypass?: null,
      delaysExpired?: null
    ): CheckingCanProcessEventFilter;
    CheckingCanProcess(
      entryId?: null,
      boardNotStale?: null,
      validEntry?: null,
      guardianBypass?: null,
      delaysExpired?: null
    ): CheckingCanProcessEventFilter;

    "CircuitBreakerUpdated(uint256,bool,bool,bool)"(
      newTimestamp?: null,
      ivVarianceThresholdCrossed?: null,
      skewVarianceThresholdCrossed?: null,
      liquidityThresholdCrossed?: null
    ): CircuitBreakerUpdatedEventFilter;
    CircuitBreakerUpdated(
      newTimestamp?: null,
      ivVarianceThresholdCrossed?: null,
      skewVarianceThresholdCrossed?: null,
      liquidityThresholdCrossed?: null
    ): CircuitBreakerUpdatedEventFilter;

    "DepositProcessed(address,address,uint256,uint256,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      depositQueueId?: PromiseOrValue<BigNumberish> | null,
      amountDeposited?: null,
      tokenPrice?: null,
      tokensReceived?: null,
      timestamp?: null
    ): DepositProcessedEventFilter;
    DepositProcessed(
      caller?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      depositQueueId?: PromiseOrValue<BigNumberish> | null,
      amountDeposited?: null,
      tokenPrice?: null,
      tokensReceived?: null,
      timestamp?: null
    ): DepositProcessedEventFilter;

    "DepositQueued(address,address,uint256,uint256,uint256,uint256)"(
      depositor?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      depositQueueId?: PromiseOrValue<BigNumberish> | null,
      amountDeposited?: null,
      totalQueuedDeposits?: null,
      timestamp?: null
    ): DepositQueuedEventFilter;
    DepositQueued(
      depositor?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      depositQueueId?: PromiseOrValue<BigNumberish> | null,
      amountDeposited?: null,
      totalQueuedDeposits?: null,
      timestamp?: null
    ): DepositQueuedEventFilter;

    "InsolventSettlementAmountUpdated(uint256,uint256)"(
      amountQuoteAdded?: null,
      totalInsolventSettlementAmount?: null
    ): InsolventSettlementAmountUpdatedEventFilter;
    InsolventSettlementAmountUpdated(
      amountQuoteAdded?: null,
      totalInsolventSettlementAmount?: null
    ): InsolventSettlementAmountUpdatedEventFilter;

    "LiquidityPoolParametersUpdated(tuple)"(
      lpParams?: null
    ): LiquidityPoolParametersUpdatedEventFilter;
    LiquidityPoolParametersUpdated(
      lpParams?: null
    ): LiquidityPoolParametersUpdatedEventFilter;

    "OutstandingSettlementSent(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      totalOutstandingSettlements?: null
    ): OutstandingSettlementSentEventFilter;
    OutstandingSettlementSent(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      totalOutstandingSettlements?: null
    ): OutstandingSettlementSentEventFilter;

    "PoolHedgerUpdated(address)"(
      poolHedger?: null
    ): PoolHedgerUpdatedEventFilter;
    PoolHedgerUpdated(poolHedger?: null): PoolHedgerUpdatedEventFilter;

    "PremiumTransferred(address,uint256,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      recipientPortion?: null,
      optionMarketPortion?: null
    ): PremiumTransferredEventFilter;
    PremiumTransferred(
      recipient?: PromiseOrValue<string> | null,
      recipientPortion?: null,
      optionMarketPortion?: null
    ): PremiumTransferredEventFilter;

    "QuoteFreed(uint256,uint256)"(
      quoteFreed?: null,
      lockedCollateralQuote?: null
    ): QuoteFreedEventFilter;
    QuoteFreed(
      quoteFreed?: null,
      lockedCollateralQuote?: null
    ): QuoteFreedEventFilter;

    "QuoteLocked(uint256,uint256)"(
      quoteLocked?: null,
      lockedCollateralQuote?: null
    ): QuoteLockedEventFilter;
    QuoteLocked(
      quoteLocked?: null,
      lockedCollateralQuote?: null
    ): QuoteLockedEventFilter;

    "QuoteTransferredToPoolHedger(uint256)"(
      amountQuote?: null
    ): QuoteTransferredToPoolHedgerEventFilter;
    QuoteTransferredToPoolHedger(
      amountQuote?: null
    ): QuoteTransferredToPoolHedgerEventFilter;

    "WithdrawPartiallyProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      withdrawalQueueId?: PromiseOrValue<BigNumberish> | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawPartiallyProcessedEventFilter;
    WithdrawPartiallyProcessed(
      caller?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      withdrawalQueueId?: PromiseOrValue<BigNumberish> | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawPartiallyProcessedEventFilter;

    "WithdrawProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      withdrawalQueueId?: PromiseOrValue<BigNumberish> | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawProcessedEventFilter;
    WithdrawProcessed(
      caller?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      withdrawalQueueId?: PromiseOrValue<BigNumberish> | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawProcessedEventFilter;

    "WithdrawQueued(address,address,uint256,uint256,uint256,uint256)"(
      withdrawer?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      withdrawalQueueId?: PromiseOrValue<BigNumberish> | null,
      amountWithdrawn?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawQueuedEventFilter;
    WithdrawQueued(
      withdrawer?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      withdrawalQueueId?: PromiseOrValue<BigNumberish> | null,
      amountWithdrawn?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawQueuedEventFilter;
  };

  estimateGas: {
    CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeBase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidity(
      spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpParams(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceWithCheck(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    initiateDeposit(
      beneficiary: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateWithdraw(
      beneficiary: PromiseOrValue<string>,
      amountLiquidityToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lockedCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

    poolHedger(overrides?: CallOverrides): Promise<BigNumber>;

    processDepositQueue(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processWithdrawalQueue(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDeposits(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedWithdrawals(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    updateCBs(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CBTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeBase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidity(
      spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPriceWithCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPoolValueQuote(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateDeposit(
      beneficiary: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateWithdraw(
      beneficiary: PromiseOrValue<string>,
      amountLiquidityToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insolventSettlementAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationInsolventAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextQueuedDepositId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextQueuedWithdrawalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolHedger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processDepositQueue(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processWithdrawalQueue(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queuedDepositHead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queuedDeposits(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuedWithdrawalHead(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuedWithdrawals(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalOutstandingSettlements(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueuedDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueuedWithdrawals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCBs(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
