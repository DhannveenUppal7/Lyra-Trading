/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace ISynthetixAdapter {
  export type ExchangeParamsStruct = {
    spotPrice: PromiseOrValue<BigNumberish>;
    quoteKey: PromiseOrValue<BytesLike>;
    baseKey: PromiseOrValue<BytesLike>;
    quoteBaseFeeRate: PromiseOrValue<BigNumberish>;
    baseQuoteFeeRate: PromiseOrValue<BigNumberish>;
  };

  export type ExchangeParamsStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    spotPrice: BigNumber;
    quoteKey: string;
    baseKey: string;
    quoteBaseFeeRate: BigNumber;
    baseQuoteFeeRate: BigNumber;
  };
}

export interface ISynthetixAdapterInterface extends utils.Interface {
  functions: {
    "addressResolver()": FunctionFragment;
    "baseKey(address)": FunctionFragment;
    "delegateApprovals()": FunctionFragment;
    "estimateExchangeToExactBase((uint256,bytes32,bytes32,uint256,uint256),uint256)": FunctionFragment;
    "estimateExchangeToExactQuote((uint256,bytes32,bytes32,uint256,uint256),uint256)": FunctionFragment;
    "exchangeFromExactBase(address,uint256)": FunctionFragment;
    "exchangeFromExactQuote(address,uint256)": FunctionFragment;
    "exchangeRates()": FunctionFragment;
    "exchangeToExactBase((uint256,bytes32,bytes32,uint256,uint256),address,uint256)": FunctionFragment;
    "exchangeToExactBaseWithLimit((uint256,bytes32,bytes32,uint256,uint256),address,uint256,uint256)": FunctionFragment;
    "exchangeToExactQuote((uint256,bytes32,bytes32,uint256,uint256),address,uint256)": FunctionFragment;
    "exchangeToExactQuoteWithLimit((uint256,bytes32,bytes32,uint256,uint256),address,uint256,uint256)": FunctionFragment;
    "exchanger()": FunctionFragment;
    "getExchangeParams(address)": FunctionFragment;
    "getSpotPrice(bytes32)": FunctionFragment;
    "getSpotPriceForMarket(address)": FunctionFragment;
    "isGlobalPaused()": FunctionFragment;
    "isMarketPaused(address)": FunctionFragment;
    "quoteKey(address)": FunctionFragment;
    "requireNotGlobalPaused(address)": FunctionFragment;
    "rewardAddress(address)": FunctionFragment;
    "synthetix()": FunctionFragment;
    "trackingCode(address)": FunctionFragment;
    "updateSynthetixAddresses()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressResolver"
      | "baseKey"
      | "delegateApprovals"
      | "estimateExchangeToExactBase"
      | "estimateExchangeToExactQuote"
      | "exchangeFromExactBase"
      | "exchangeFromExactQuote"
      | "exchangeRates"
      | "exchangeToExactBase"
      | "exchangeToExactBaseWithLimit"
      | "exchangeToExactQuote"
      | "exchangeToExactQuoteWithLimit"
      | "exchanger"
      | "getExchangeParams"
      | "getSpotPrice"
      | "getSpotPriceForMarket"
      | "isGlobalPaused"
      | "isMarketPaused"
      | "quoteKey"
      | "requireNotGlobalPaused"
      | "rewardAddress"
      | "synthetix"
      | "trackingCode"
      | "updateSynthetixAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExchangeToExactBase",
    values: [
      ISynthetixAdapter.ExchangeParamsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExchangeToExactQuote",
    values: [
      ISynthetixAdapter.ExchangeParamsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFromExactBase",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFromExactQuote",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeToExactBase",
    values: [
      ISynthetixAdapter.ExchangeParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeToExactBaseWithLimit",
    values: [
      ISynthetixAdapter.ExchangeParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeToExactQuote",
    values: [
      ISynthetixAdapter.ExchangeParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeToExactQuoteWithLimit",
    values: [
      ISynthetixAdapter.ExchangeParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "exchanger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExchangeParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPriceForMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGlobalPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketPaused",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requireNotGlobalPaused",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "synthetix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trackingCode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSynthetixAddresses",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addressResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExchangeToExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExchangeToExactQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFromExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFromExactQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToExactBaseWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToExactQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeToExactQuoteWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchanger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPriceForMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requireNotGlobalPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synthetix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trackingCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSynthetixAddresses",
    data: BytesLike
  ): Result;

  events: {
    "AddressResolverSet(address)": EventFragment;
    "BaseSwappedForQuote(address,address,uint256,uint256)": EventFragment;
    "GlobalPausedSet(bool)": EventFragment;
    "GlobalsSetForContract(address,bytes32,bytes32,address,bytes32)": EventFragment;
    "MarketPausedSet(address,bool)": EventFragment;
    "QuoteSwappedForBase(address,address,uint256,uint256)": EventFragment;
    "SynthetixAddressesUpdated(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressResolverSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseSwappedForQuote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalPausedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalsSetForContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketPausedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteSwappedForBase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthetixAddressesUpdated"): EventFragment;
}

export interface AddressResolverSetEventObject {
  addressResolver: string;
}
export type AddressResolverSetEvent = TypedEvent<
  [string],
  AddressResolverSetEventObject
>;

export type AddressResolverSetEventFilter =
  TypedEventFilter<AddressResolverSetEvent>;

export interface BaseSwappedForQuoteEventObject {
  marketAddress: string;
  exchanger: string;
  baseSwapped: BigNumber;
  quoteReceived: BigNumber;
}
export type BaseSwappedForQuoteEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BaseSwappedForQuoteEventObject
>;

export type BaseSwappedForQuoteEventFilter =
  TypedEventFilter<BaseSwappedForQuoteEvent>;

export interface GlobalPausedSetEventObject {
  isPaused: boolean;
}
export type GlobalPausedSetEvent = TypedEvent<
  [boolean],
  GlobalPausedSetEventObject
>;

export type GlobalPausedSetEventFilter = TypedEventFilter<GlobalPausedSetEvent>;

export interface GlobalsSetForContractEventObject {
  market: string;
  quoteKey: string;
  baseKey: string;
  rewardAddress: string;
  trackingCode: string;
}
export type GlobalsSetForContractEvent = TypedEvent<
  [string, string, string, string, string],
  GlobalsSetForContractEventObject
>;

export type GlobalsSetForContractEventFilter =
  TypedEventFilter<GlobalsSetForContractEvent>;

export interface MarketPausedSetEventObject {
  contractAddress: string;
  isPaused: boolean;
}
export type MarketPausedSetEvent = TypedEvent<
  [string, boolean],
  MarketPausedSetEventObject
>;

export type MarketPausedSetEventFilter = TypedEventFilter<MarketPausedSetEvent>;

export interface QuoteSwappedForBaseEventObject {
  marketAddress: string;
  exchanger: string;
  quoteSwapped: BigNumber;
  baseReceived: BigNumber;
}
export type QuoteSwappedForBaseEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  QuoteSwappedForBaseEventObject
>;

export type QuoteSwappedForBaseEventFilter =
  TypedEventFilter<QuoteSwappedForBaseEvent>;

export interface SynthetixAddressesUpdatedEventObject {
  synthetix: string;
  exchanger: string;
  exchangeRates: string;
  delegateApprovals: string;
}
export type SynthetixAddressesUpdatedEvent = TypedEvent<
  [string, string, string, string],
  SynthetixAddressesUpdatedEventObject
>;

export type SynthetixAddressesUpdatedEventFilter =
  TypedEventFilter<SynthetixAddressesUpdatedEvent>;

export interface ISynthetixAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISynthetixAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressResolver(overrides?: CallOverrides): Promise<[string]>;

    baseKey(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delegateApprovals(overrides?: CallOverrides): Promise<[string]>;

    estimateExchangeToExactBase(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteNeeded: BigNumber }>;

    estimateExchangeToExactQuote(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { baseNeeded: BigNumber }>;

    exchangeFromExactBase(
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeFromExactQuote(
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeRates(overrides?: CallOverrides): Promise<[string]>;

    exchangeToExactBase(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeToExactBaseWithLimit(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      quoteLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeToExactQuote(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeToExactQuoteWithLimit(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      baseLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchanger(overrides?: CallOverrides): Promise<[string]>;

    getExchangeParams(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ISynthetixAdapter.ExchangeParamsStructOutput] & {
        exchangeParams: ISynthetixAdapter.ExchangeParamsStructOutput;
      }
    >;

    getSpotPrice(
      to: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSpotPriceForMarket(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spotPrice: BigNumber }>;

    isGlobalPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isMarketPaused(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    quoteKey(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    requireNotGlobalPaused(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    rewardAddress(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    synthetix(overrides?: CallOverrides): Promise<[string]>;

    trackingCode(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateSynthetixAddresses(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addressResolver(overrides?: CallOverrides): Promise<string>;

  baseKey(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  delegateApprovals(overrides?: CallOverrides): Promise<string>;

  estimateExchangeToExactBase(
    exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
    amountBase: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateExchangeToExactQuote(
    exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
    amountQuote: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exchangeFromExactBase(
    optionMarket: PromiseOrValue<string>,
    amountBase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeFromExactQuote(
    optionMarket: PromiseOrValue<string>,
    amountQuote: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeRates(overrides?: CallOverrides): Promise<string>;

  exchangeToExactBase(
    exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
    optionMarket: PromiseOrValue<string>,
    amountBase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeToExactBaseWithLimit(
    exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
    optionMarket: PromiseOrValue<string>,
    amountBase: PromiseOrValue<BigNumberish>,
    quoteLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeToExactQuote(
    exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
    optionMarket: PromiseOrValue<string>,
    amountQuote: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeToExactQuoteWithLimit(
    exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
    optionMarket: PromiseOrValue<string>,
    amountQuote: PromiseOrValue<BigNumberish>,
    baseLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchanger(overrides?: CallOverrides): Promise<string>;

  getExchangeParams(
    optionMarket: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ISynthetixAdapter.ExchangeParamsStructOutput>;

  getSpotPrice(
    to: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpotPriceForMarket(
    _contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isGlobalPaused(overrides?: CallOverrides): Promise<boolean>;

  isMarketPaused(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  quoteKey(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  requireNotGlobalPaused(
    optionMarket: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  rewardAddress(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  synthetix(overrides?: CallOverrides): Promise<string>;

  trackingCode(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateSynthetixAddresses(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressResolver(overrides?: CallOverrides): Promise<string>;

    baseKey(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    delegateApprovals(overrides?: CallOverrides): Promise<string>;

    estimateExchangeToExactBase(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExchangeToExactQuote(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromExactBase(
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromExactQuote(
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeRates(overrides?: CallOverrides): Promise<string>;

    exchangeToExactBase(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        quoteSpent: BigNumber;
        baseReceived: BigNumber;
      }
    >;

    exchangeToExactBaseWithLimit(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      quoteLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        quoteSpent: BigNumber;
        baseReceived: BigNumber;
      }
    >;

    exchangeToExactQuote(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseSpent: BigNumber;
        quoteReceived: BigNumber;
      }
    >;

    exchangeToExactQuoteWithLimit(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      baseLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseSpent: BigNumber;
        quoteReceived: BigNumber;
      }
    >;

    exchanger(overrides?: CallOverrides): Promise<string>;

    getExchangeParams(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ISynthetixAdapter.ExchangeParamsStructOutput>;

    getSpotPrice(
      to: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPriceForMarket(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGlobalPaused(overrides?: CallOverrides): Promise<boolean>;

    isMarketPaused(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    quoteKey(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    requireNotGlobalPaused(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardAddress(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    synthetix(overrides?: CallOverrides): Promise<string>;

    trackingCode(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateSynthetixAddresses(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddressResolverSet(address)"(
      addressResolver?: null
    ): AddressResolverSetEventFilter;
    AddressResolverSet(addressResolver?: null): AddressResolverSetEventFilter;

    "BaseSwappedForQuote(address,address,uint256,uint256)"(
      marketAddress?: PromiseOrValue<string> | null,
      exchanger?: PromiseOrValue<string> | null,
      baseSwapped?: null,
      quoteReceived?: null
    ): BaseSwappedForQuoteEventFilter;
    BaseSwappedForQuote(
      marketAddress?: PromiseOrValue<string> | null,
      exchanger?: PromiseOrValue<string> | null,
      baseSwapped?: null,
      quoteReceived?: null
    ): BaseSwappedForQuoteEventFilter;

    "GlobalPausedSet(bool)"(isPaused?: null): GlobalPausedSetEventFilter;
    GlobalPausedSet(isPaused?: null): GlobalPausedSetEventFilter;

    "GlobalsSetForContract(address,bytes32,bytes32,address,bytes32)"(
      market?: PromiseOrValue<string> | null,
      quoteKey?: null,
      baseKey?: null,
      rewardAddress?: null,
      trackingCode?: null
    ): GlobalsSetForContractEventFilter;
    GlobalsSetForContract(
      market?: PromiseOrValue<string> | null,
      quoteKey?: null,
      baseKey?: null,
      rewardAddress?: null,
      trackingCode?: null
    ): GlobalsSetForContractEventFilter;

    "MarketPausedSet(address,bool)"(
      contractAddress?: null,
      isPaused?: null
    ): MarketPausedSetEventFilter;
    MarketPausedSet(
      contractAddress?: null,
      isPaused?: null
    ): MarketPausedSetEventFilter;

    "QuoteSwappedForBase(address,address,uint256,uint256)"(
      marketAddress?: PromiseOrValue<string> | null,
      exchanger?: PromiseOrValue<string> | null,
      quoteSwapped?: null,
      baseReceived?: null
    ): QuoteSwappedForBaseEventFilter;
    QuoteSwappedForBase(
      marketAddress?: PromiseOrValue<string> | null,
      exchanger?: PromiseOrValue<string> | null,
      quoteSwapped?: null,
      baseReceived?: null
    ): QuoteSwappedForBaseEventFilter;

    "SynthetixAddressesUpdated(address,address,address,address)"(
      synthetix?: null,
      exchanger?: null,
      exchangeRates?: null,
      delegateApprovals?: null
    ): SynthetixAddressesUpdatedEventFilter;
    SynthetixAddressesUpdated(
      synthetix?: null,
      exchanger?: null,
      exchangeRates?: null,
      delegateApprovals?: null
    ): SynthetixAddressesUpdatedEventFilter;
  };

  estimateGas: {
    addressResolver(overrides?: CallOverrides): Promise<BigNumber>;

    baseKey(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateApprovals(overrides?: CallOverrides): Promise<BigNumber>;

    estimateExchangeToExactBase(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExchangeToExactQuote(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromExactBase(
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeFromExactQuote(
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeRates(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeToExactBase(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeToExactBaseWithLimit(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      quoteLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeToExactQuote(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeToExactQuoteWithLimit(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      baseLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchanger(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeParams(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPrice(
      to: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPriceForMarket(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGlobalPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isMarketPaused(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteKey(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireNotGlobalPaused(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardAddress(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synthetix(overrides?: CallOverrides): Promise<BigNumber>;

    trackingCode(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSynthetixAddresses(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseKey(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateApprovals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateExchangeToExactBase(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateExchangeToExactQuote(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeFromExactBase(
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeFromExactQuote(
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeToExactBase(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeToExactBaseWithLimit(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountBase: PromiseOrValue<BigNumberish>,
      quoteLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeToExactQuote(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeToExactQuoteWithLimit(
      exchangeParams: ISynthetixAdapter.ExchangeParamsStruct,
      optionMarket: PromiseOrValue<string>,
      amountQuote: PromiseOrValue<BigNumberish>,
      baseLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchanger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeParams(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(
      to: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPriceForMarket(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGlobalPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMarketPaused(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteKey(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireNotGlobalPaused(
      optionMarket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardAddress(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    synthetix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trackingCode(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSynthetixAddresses(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
